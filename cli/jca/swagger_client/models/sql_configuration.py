# coding: utf-8

"""
    jans-config-api

    jans-config-api - Authorization services  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: xxx@gluu.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SqlConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'config_id': 'str',
        'user_name': 'str',
        'user_password': 'str',
        'connection_uri': 'list[str]',
        'schema_name': 'str',
        'password_encryption_method': 'str',
        'server_timezone': 'str',
        'binary_attributes': 'list[str]',
        'certificate_attributes': 'list[str]'
    }

    attribute_map = {
        'config_id': 'configId',
        'user_name': 'userName',
        'user_password': 'userPassword',
        'connection_uri': 'connectionUri',
        'schema_name': 'schemaName',
        'password_encryption_method': 'passwordEncryptionMethod',
        'server_timezone': 'serverTimezone',
        'binary_attributes': 'binaryAttributes',
        'certificate_attributes': 'certificateAttributes'
    }

    def __init__(self, config_id=None, user_name=None, user_password=None, connection_uri=None, schema_name=None, password_encryption_method=None, server_timezone=None, binary_attributes=None, certificate_attributes=None):  # noqa: E501
        """SqlConfiguration - a model defined in Swagger"""  # noqa: E501
        self._config_id = None
        self._user_name = None
        self._user_password = None
        self._connection_uri = None
        self._schema_name = None
        self._password_encryption_method = None
        self._server_timezone = None
        self._binary_attributes = None
        self._certificate_attributes = None
        self.discriminator = None
        self.config_id = config_id
        self.user_name = user_name
        self.user_password = user_password
        self.connection_uri = connection_uri
        self.schema_name = schema_name
        self.password_encryption_method = password_encryption_method
        if server_timezone is not None:
            self.server_timezone = server_timezone
        if binary_attributes is not None:
            self.binary_attributes = binary_attributes
        if certificate_attributes is not None:
            self.certificate_attributes = certificate_attributes

    @property
    def config_id(self):
        """Gets the config_id of this SqlConfiguration.  # noqa: E501

        Unique identifier  # noqa: E501

        :return: The config_id of this SqlConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._config_id

    @config_id.setter
    def config_id(self, config_id):
        """Sets the config_id of this SqlConfiguration.

        Unique identifier  # noqa: E501

        :param config_id: The config_id of this SqlConfiguration.  # noqa: E501
        :type: str
        """
        if config_id is None:
            raise ValueError("Invalid value for `config_id`, must not be `None`")  # noqa: E501

        self._config_id = config_id

    @property
    def user_name(self):
        """Gets the user_name of this SqlConfiguration.  # noqa: E501

        Sql server user.  # noqa: E501

        :return: The user_name of this SqlConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this SqlConfiguration.

        Sql server user.  # noqa: E501

        :param user_name: The user_name of this SqlConfiguration.  # noqa: E501
        :type: str
        """
        if user_name is None:
            raise ValueError("Invalid value for `user_name`, must not be `None`")  # noqa: E501

        self._user_name = user_name

    @property
    def user_password(self):
        """Gets the user_password of this SqlConfiguration.  # noqa: E501

        Encoded Sql server user password.  # noqa: E501

        :return: The user_password of this SqlConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._user_password

    @user_password.setter
    def user_password(self, user_password):
        """Sets the user_password of this SqlConfiguration.

        Encoded Sql server user password.  # noqa: E501

        :param user_password: The user_password of this SqlConfiguration.  # noqa: E501
        :type: str
        """
        if user_password is None:
            raise ValueError("Invalid value for `user_password`, must not be `None`")  # noqa: E501

        self._user_password = user_password

    @property
    def connection_uri(self):
        """Gets the connection_uri of this SqlConfiguration.  # noqa: E501

        Sql server connection Uri.  # noqa: E501

        :return: The connection_uri of this SqlConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._connection_uri

    @connection_uri.setter
    def connection_uri(self, connection_uri):
        """Sets the connection_uri of this SqlConfiguration.

        Sql server connection Uri.  # noqa: E501

        :param connection_uri: The connection_uri of this SqlConfiguration.  # noqa: E501
        :type: list[str]
        """
        if connection_uri is None:
            raise ValueError("Invalid value for `connection_uri`, must not be `None`")  # noqa: E501

        self._connection_uri = connection_uri

    @property
    def schema_name(self):
        """Gets the schema_name of this SqlConfiguration.  # noqa: E501

        Database schema name.  # noqa: E501

        :return: The schema_name of this SqlConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._schema_name

    @schema_name.setter
    def schema_name(self, schema_name):
        """Sets the schema_name of this SqlConfiguration.

        Database schema name.  # noqa: E501

        :param schema_name: The schema_name of this SqlConfiguration.  # noqa: E501
        :type: str
        """
        if schema_name is None:
            raise ValueError("Invalid value for `schema_name`, must not be `None`")  # noqa: E501

        self._schema_name = schema_name

    @property
    def password_encryption_method(self):
        """Gets the password_encryption_method of this SqlConfiguration.  # noqa: E501

        A list of the password encryption algorithms.  # noqa: E501

        :return: The password_encryption_method of this SqlConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._password_encryption_method

    @password_encryption_method.setter
    def password_encryption_method(self, password_encryption_method):
        """Sets the password_encryption_method of this SqlConfiguration.

        A list of the password encryption algorithms.  # noqa: E501

        :param password_encryption_method: The password_encryption_method of this SqlConfiguration.  # noqa: E501
        :type: str
        """
        if password_encryption_method is None:
            raise ValueError("Invalid value for `password_encryption_method`, must not be `None`")  # noqa: E501
        allowed_values = ["SHA", "SSHA", "SHA-256", "SSHA-256", "SHA-384", "SSHA-384", "SHA-512", "SSHA-512", "MD5", "SMD5", "CRYPT", "CRYPT-MD5", "CRYPT-SHA-256", "CRYPT-SHA-512", "CRYPT-BCRYPT", "CRYPT-BCRYPT", "PKCS5S2"]  # noqa: E501
        if password_encryption_method not in allowed_values:
            raise ValueError(
                "Invalid value for `password_encryption_method` ({0}), must be one of {1}"  # noqa: E501
                .format(password_encryption_method, allowed_values)
            )

        self._password_encryption_method = password_encryption_method

    @property
    def server_timezone(self):
        """Gets the server_timezone of this SqlConfiguration.  # noqa: E501

        Database schema name.  # noqa: E501

        :return: The server_timezone of this SqlConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._server_timezone

    @server_timezone.setter
    def server_timezone(self, server_timezone):
        """Sets the server_timezone of this SqlConfiguration.

        Database schema name.  # noqa: E501

        :param server_timezone: The server_timezone of this SqlConfiguration.  # noqa: E501
        :type: str
        """

        self._server_timezone = server_timezone

    @property
    def binary_attributes(self):
        """Gets the binary_attributes of this SqlConfiguration.  # noqa: E501

        List of binary attributes.  # noqa: E501

        :return: The binary_attributes of this SqlConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._binary_attributes

    @binary_attributes.setter
    def binary_attributes(self, binary_attributes):
        """Sets the binary_attributes of this SqlConfiguration.

        List of binary attributes.  # noqa: E501

        :param binary_attributes: The binary_attributes of this SqlConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._binary_attributes = binary_attributes

    @property
    def certificate_attributes(self):
        """Gets the certificate_attributes of this SqlConfiguration.  # noqa: E501

        List of certificate attributes.  # noqa: E501

        :return: The certificate_attributes of this SqlConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._certificate_attributes

    @certificate_attributes.setter
    def certificate_attributes(self, certificate_attributes):
        """Sets the certificate_attributes of this SqlConfiguration.

        List of certificate attributes.  # noqa: E501

        :param certificate_attributes: The certificate_attributes of this SqlConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._certificate_attributes = certificate_attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SqlConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SqlConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
