# coding: utf-8

"""
    SCIM API

    Gluu SCIM 2.0 server API. Developers can think of SCIM as a REST API with endpoints exposing CRUD functionality (create, update, retrieve and delete) for identity management resources such as users, groups, and fido devices.   # noqa: E501

    OpenAPI spec version: 4.2.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ServiceProviderConfigResponseBulk(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'supported': 'bool',
        'max_operations': 'int',
        'max_payload_size': 'int'
    }

    attribute_map = {
        'supported': 'supported',
        'max_operations': 'maxOperations',
        'max_payload_size': 'maxPayloadSize'
    }

    def __init__(self, supported=None, max_operations=None, max_payload_size=None):  # noqa: E501
        """ServiceProviderConfigResponseBulk - a model defined in Swagger"""  # noqa: E501
        self._supported = None
        self._max_operations = None
        self._max_payload_size = None
        self.discriminator = None
        if supported is not None:
            self.supported = supported
        if max_operations is not None:
            self.max_operations = max_operations
        if max_payload_size is not None:
            self.max_payload_size = max_payload_size

    @property
    def supported(self):
        """Gets the supported of this ServiceProviderConfigResponseBulk.  # noqa: E501


        :return: The supported of this ServiceProviderConfigResponseBulk.  # noqa: E501
        :rtype: bool
        """
        return self._supported

    @supported.setter
    def supported(self, supported):
        """Sets the supported of this ServiceProviderConfigResponseBulk.


        :param supported: The supported of this ServiceProviderConfigResponseBulk.  # noqa: E501
        :type: bool
        """

        self._supported = supported

    @property
    def max_operations(self):
        """Gets the max_operations of this ServiceProviderConfigResponseBulk.  # noqa: E501


        :return: The max_operations of this ServiceProviderConfigResponseBulk.  # noqa: E501
        :rtype: int
        """
        return self._max_operations

    @max_operations.setter
    def max_operations(self, max_operations):
        """Sets the max_operations of this ServiceProviderConfigResponseBulk.


        :param max_operations: The max_operations of this ServiceProviderConfigResponseBulk.  # noqa: E501
        :type: int
        """

        self._max_operations = max_operations

    @property
    def max_payload_size(self):
        """Gets the max_payload_size of this ServiceProviderConfigResponseBulk.  # noqa: E501


        :return: The max_payload_size of this ServiceProviderConfigResponseBulk.  # noqa: E501
        :rtype: int
        """
        return self._max_payload_size

    @max_payload_size.setter
    def max_payload_size(self, max_payload_size):
        """Sets the max_payload_size of this ServiceProviderConfigResponseBulk.


        :param max_payload_size: The max_payload_size of this ServiceProviderConfigResponseBulk.  # noqa: E501
        :type: int
        """

        self._max_payload_size = max_payload_size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServiceProviderConfigResponseBulk, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceProviderConfigResponseBulk):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
