# coding: utf-8

"""
    SCIM API

    Gluu SCIM 2.0 server API. Developers can think of SCIM as a REST API with endpoints exposing CRUD functionality (create, update, retrieve and delete) for identity management resources such as users, groups, and fido devices.   # noqa: E501

    OpenAPI spec version: 4.2.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ServiceProviderConfigResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'schemas': 'list[str]',
        'meta': 'ServiceProviderConfigResponseMeta',
        'documentation_uri': 'str',
        'patch': 'ServiceProviderConfigResponsePatch',
        'bulk': 'ServiceProviderConfigResponseBulk',
        'filter': 'ServiceProviderConfigResponseFilter',
        'change_password': 'ServiceProviderConfigResponsePatch',
        'sort': 'ServiceProviderConfigResponsePatch',
        'etag': 'ServiceProviderConfigResponsePatch',
        'authentication_schemes': 'ServiceProviderConfigResponseAuthenticationSchemes'
    }

    attribute_map = {
        'schemas': 'schemas',
        'meta': 'meta',
        'documentation_uri': 'documentationUri',
        'patch': 'patch',
        'bulk': 'bulk',
        'filter': 'filter',
        'change_password': 'changePassword',
        'sort': 'sort',
        'etag': 'etag',
        'authentication_schemes': 'authenticationSchemes'
    }

    def __init__(self, schemas=None, meta=None, documentation_uri=None, patch=None, bulk=None, filter=None, change_password=None, sort=None, etag=None, authentication_schemes=None):  # noqa: E501
        """ServiceProviderConfigResponse - a model defined in Swagger"""  # noqa: E501
        self._schemas = None
        self._meta = None
        self._documentation_uri = None
        self._patch = None
        self._bulk = None
        self._filter = None
        self._change_password = None
        self._sort = None
        self._etag = None
        self._authentication_schemes = None
        self.discriminator = None
        if schemas is not None:
            self.schemas = schemas
        if meta is not None:
            self.meta = meta
        if documentation_uri is not None:
            self.documentation_uri = documentation_uri
        if patch is not None:
            self.patch = patch
        if bulk is not None:
            self.bulk = bulk
        if filter is not None:
            self.filter = filter
        if change_password is not None:
            self.change_password = change_password
        if sort is not None:
            self.sort = sort
        if etag is not None:
            self.etag = etag
        if authentication_schemes is not None:
            self.authentication_schemes = authentication_schemes

    @property
    def schemas(self):
        """Gets the schemas of this ServiceProviderConfigResponse.  # noqa: E501


        :return: The schemas of this ServiceProviderConfigResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._schemas

    @schemas.setter
    def schemas(self, schemas):
        """Sets the schemas of this ServiceProviderConfigResponse.


        :param schemas: The schemas of this ServiceProviderConfigResponse.  # noqa: E501
        :type: list[str]
        """

        self._schemas = schemas

    @property
    def meta(self):
        """Gets the meta of this ServiceProviderConfigResponse.  # noqa: E501


        :return: The meta of this ServiceProviderConfigResponse.  # noqa: E501
        :rtype: ServiceProviderConfigResponseMeta
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this ServiceProviderConfigResponse.


        :param meta: The meta of this ServiceProviderConfigResponse.  # noqa: E501
        :type: ServiceProviderConfigResponseMeta
        """

        self._meta = meta

    @property
    def documentation_uri(self):
        """Gets the documentation_uri of this ServiceProviderConfigResponse.  # noqa: E501


        :return: The documentation_uri of this ServiceProviderConfigResponse.  # noqa: E501
        :rtype: str
        """
        return self._documentation_uri

    @documentation_uri.setter
    def documentation_uri(self, documentation_uri):
        """Sets the documentation_uri of this ServiceProviderConfigResponse.


        :param documentation_uri: The documentation_uri of this ServiceProviderConfigResponse.  # noqa: E501
        :type: str
        """

        self._documentation_uri = documentation_uri

    @property
    def patch(self):
        """Gets the patch of this ServiceProviderConfigResponse.  # noqa: E501


        :return: The patch of this ServiceProviderConfigResponse.  # noqa: E501
        :rtype: ServiceProviderConfigResponsePatch
        """
        return self._patch

    @patch.setter
    def patch(self, patch):
        """Sets the patch of this ServiceProviderConfigResponse.


        :param patch: The patch of this ServiceProviderConfigResponse.  # noqa: E501
        :type: ServiceProviderConfigResponsePatch
        """

        self._patch = patch

    @property
    def bulk(self):
        """Gets the bulk of this ServiceProviderConfigResponse.  # noqa: E501


        :return: The bulk of this ServiceProviderConfigResponse.  # noqa: E501
        :rtype: ServiceProviderConfigResponseBulk
        """
        return self._bulk

    @bulk.setter
    def bulk(self, bulk):
        """Sets the bulk of this ServiceProviderConfigResponse.


        :param bulk: The bulk of this ServiceProviderConfigResponse.  # noqa: E501
        :type: ServiceProviderConfigResponseBulk
        """

        self._bulk = bulk

    @property
    def filter(self):
        """Gets the filter of this ServiceProviderConfigResponse.  # noqa: E501


        :return: The filter of this ServiceProviderConfigResponse.  # noqa: E501
        :rtype: ServiceProviderConfigResponseFilter
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this ServiceProviderConfigResponse.


        :param filter: The filter of this ServiceProviderConfigResponse.  # noqa: E501
        :type: ServiceProviderConfigResponseFilter
        """

        self._filter = filter

    @property
    def change_password(self):
        """Gets the change_password of this ServiceProviderConfigResponse.  # noqa: E501


        :return: The change_password of this ServiceProviderConfigResponse.  # noqa: E501
        :rtype: ServiceProviderConfigResponsePatch
        """
        return self._change_password

    @change_password.setter
    def change_password(self, change_password):
        """Sets the change_password of this ServiceProviderConfigResponse.


        :param change_password: The change_password of this ServiceProviderConfigResponse.  # noqa: E501
        :type: ServiceProviderConfigResponsePatch
        """

        self._change_password = change_password

    @property
    def sort(self):
        """Gets the sort of this ServiceProviderConfigResponse.  # noqa: E501


        :return: The sort of this ServiceProviderConfigResponse.  # noqa: E501
        :rtype: ServiceProviderConfigResponsePatch
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this ServiceProviderConfigResponse.


        :param sort: The sort of this ServiceProviderConfigResponse.  # noqa: E501
        :type: ServiceProviderConfigResponsePatch
        """

        self._sort = sort

    @property
    def etag(self):
        """Gets the etag of this ServiceProviderConfigResponse.  # noqa: E501


        :return: The etag of this ServiceProviderConfigResponse.  # noqa: E501
        :rtype: ServiceProviderConfigResponsePatch
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this ServiceProviderConfigResponse.


        :param etag: The etag of this ServiceProviderConfigResponse.  # noqa: E501
        :type: ServiceProviderConfigResponsePatch
        """

        self._etag = etag

    @property
    def authentication_schemes(self):
        """Gets the authentication_schemes of this ServiceProviderConfigResponse.  # noqa: E501


        :return: The authentication_schemes of this ServiceProviderConfigResponse.  # noqa: E501
        :rtype: ServiceProviderConfigResponseAuthenticationSchemes
        """
        return self._authentication_schemes

    @authentication_schemes.setter
    def authentication_schemes(self, authentication_schemes):
        """Sets the authentication_schemes of this ServiceProviderConfigResponse.


        :param authentication_schemes: The authentication_schemes of this ServiceProviderConfigResponse.  # noqa: E501
        :type: ServiceProviderConfigResponseAuthenticationSchemes
        """

        self._authentication_schemes = authentication_schemes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServiceProviderConfigResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceProviderConfigResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
