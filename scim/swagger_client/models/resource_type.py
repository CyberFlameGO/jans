# coding: utf-8

"""
    SCIM API

    Gluu SCIM 2.0 server API. Developers can think of SCIM as a REST API with endpoints exposing CRUD functionality (create, update, retrieve and delete) for identity management resources such as users, groups, and fido devices.   # noqa: E501

    OpenAPI spec version: 4.2.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ResourceType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'schemas': 'list[str]',
        'id': 'str',
        'meta': 'ServiceProviderConfigResponseMeta',
        'name': 'str',
        'description': 'str',
        'endpoint': 'str',
        'schema': 'str',
        'schema_extensions': 'ResourceTypeSchemaExtensions'
    }

    attribute_map = {
        'schemas': 'schemas',
        'id': 'id',
        'meta': 'meta',
        'name': 'name',
        'description': 'description',
        'endpoint': 'endpoint',
        'schema': 'schema',
        'schema_extensions': 'schemaExtensions'
    }

    def __init__(self, schemas=None, id=None, meta=None, name=None, description=None, endpoint=None, schema=None, schema_extensions=None):  # noqa: E501
        """ResourceType - a model defined in Swagger"""  # noqa: E501
        self._schemas = None
        self._id = None
        self._meta = None
        self._name = None
        self._description = None
        self._endpoint = None
        self._schema = None
        self._schema_extensions = None
        self.discriminator = None
        if schemas is not None:
            self.schemas = schemas
        if id is not None:
            self.id = id
        if meta is not None:
            self.meta = meta
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if endpoint is not None:
            self.endpoint = endpoint
        if schema is not None:
            self.schema = schema
        if schema_extensions is not None:
            self.schema_extensions = schema_extensions

    @property
    def schemas(self):
        """Gets the schemas of this ResourceType.  # noqa: E501


        :return: The schemas of this ResourceType.  # noqa: E501
        :rtype: list[str]
        """
        return self._schemas

    @schemas.setter
    def schemas(self, schemas):
        """Sets the schemas of this ResourceType.


        :param schemas: The schemas of this ResourceType.  # noqa: E501
        :type: list[str]
        """

        self._schemas = schemas

    @property
    def id(self):
        """Gets the id of this ResourceType.  # noqa: E501


        :return: The id of this ResourceType.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ResourceType.


        :param id: The id of this ResourceType.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def meta(self):
        """Gets the meta of this ResourceType.  # noqa: E501


        :return: The meta of this ResourceType.  # noqa: E501
        :rtype: ServiceProviderConfigResponseMeta
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this ResourceType.


        :param meta: The meta of this ResourceType.  # noqa: E501
        :type: ServiceProviderConfigResponseMeta
        """

        self._meta = meta

    @property
    def name(self):
        """Gets the name of this ResourceType.  # noqa: E501


        :return: The name of this ResourceType.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ResourceType.


        :param name: The name of this ResourceType.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this ResourceType.  # noqa: E501


        :return: The description of this ResourceType.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ResourceType.


        :param description: The description of this ResourceType.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def endpoint(self):
        """Gets the endpoint of this ResourceType.  # noqa: E501


        :return: The endpoint of this ResourceType.  # noqa: E501
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this ResourceType.


        :param endpoint: The endpoint of this ResourceType.  # noqa: E501
        :type: str
        """

        self._endpoint = endpoint

    @property
    def schema(self):
        """Gets the schema of this ResourceType.  # noqa: E501


        :return: The schema of this ResourceType.  # noqa: E501
        :rtype: str
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """Sets the schema of this ResourceType.


        :param schema: The schema of this ResourceType.  # noqa: E501
        :type: str
        """

        self._schema = schema

    @property
    def schema_extensions(self):
        """Gets the schema_extensions of this ResourceType.  # noqa: E501


        :return: The schema_extensions of this ResourceType.  # noqa: E501
        :rtype: ResourceTypeSchemaExtensions
        """
        return self._schema_extensions

    @schema_extensions.setter
    def schema_extensions(self, schema_extensions):
        """Sets the schema_extensions of this ResourceType.


        :param schema_extensions: The schema_extensions of this ResourceType.  # noqa: E501
        :type: ResourceTypeSchemaExtensions
        """

        self._schema_extensions = schema_extensions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResourceType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResourceType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
