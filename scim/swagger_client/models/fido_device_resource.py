# coding: utf-8

"""
    SCIM API

    Janssen SCIM 2.0 server API. Developers can think of SCIM as a REST API with endpoints exposing CRUD functionality (create, update, retrieve and delete) for identity management resources such as users, groups, and fido devices.   # noqa: E501

    OpenAPI spec version: 5.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.base_resource import BaseResource  # noqa: F401,E501

class FidoDeviceResource(BaseResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_id': 'str',
        'creation_date': 'datetime',
        'application': 'str',
        'counter': 'int',
        'device_data': 'str',
        'device_hash_code': 'int',
        'device_key_handle': 'str',
        'device_registration_conf': 'str',
        'last_access_time': 'datetime',
        'status': 'str',
        'display_name': 'str',
        'description': 'str'
    }
    if hasattr(BaseResource, "swagger_types"):
        swagger_types.update(BaseResource.swagger_types)

    attribute_map = {
        'user_id': 'userId',
        'creation_date': 'creationDate',
        'application': 'application',
        'counter': 'counter',
        'device_data': 'deviceData',
        'device_hash_code': 'deviceHashCode',
        'device_key_handle': 'deviceKeyHandle',
        'device_registration_conf': 'deviceRegistrationConf',
        'last_access_time': 'lastAccessTime',
        'status': 'status',
        'display_name': 'displayName',
        'description': 'description'
    }
    if hasattr(BaseResource, "attribute_map"):
        attribute_map.update(BaseResource.attribute_map)

    def __init__(self, user_id=None, creation_date=None, application=None, counter=None, device_data=None, device_hash_code=None, device_key_handle=None, device_registration_conf=None, last_access_time=None, status=None, display_name=None, description=None, *args, **kwargs):  # noqa: E501
        """FidoDeviceResource - a model defined in Swagger"""  # noqa: E501
        self._user_id = None
        self._creation_date = None
        self._application = None
        self._counter = None
        self._device_data = None
        self._device_hash_code = None
        self._device_key_handle = None
        self._device_registration_conf = None
        self._last_access_time = None
        self._status = None
        self._display_name = None
        self._description = None
        self.discriminator = None
        if user_id is not None:
            self.user_id = user_id
        if creation_date is not None:
            self.creation_date = creation_date
        if application is not None:
            self.application = application
        if counter is not None:
            self.counter = counter
        if device_data is not None:
            self.device_data = device_data
        if device_hash_code is not None:
            self.device_hash_code = device_hash_code
        if device_key_handle is not None:
            self.device_key_handle = device_key_handle
        if device_registration_conf is not None:
            self.device_registration_conf = device_registration_conf
        if last_access_time is not None:
            self.last_access_time = last_access_time
        if status is not None:
            self.status = status
        if display_name is not None:
            self.display_name = display_name
        if description is not None:
            self.description = description
        BaseResource.__init__(self, *args, **kwargs)

    @property
    def user_id(self):
        """Gets the user_id of this FidoDeviceResource.  # noqa: E501

        Identifies the owner of the enrollment  # noqa: E501

        :return: The user_id of this FidoDeviceResource.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this FidoDeviceResource.

        Identifies the owner of the enrollment  # noqa: E501

        :param user_id: The user_id of this FidoDeviceResource.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def creation_date(self):
        """Gets the creation_date of this FidoDeviceResource.  # noqa: E501

        Date of enrollment in ISO format  # noqa: E501

        :return: The creation_date of this FidoDeviceResource.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this FidoDeviceResource.

        Date of enrollment in ISO format  # noqa: E501

        :param creation_date: The creation_date of this FidoDeviceResource.  # noqa: E501
        :type: datetime
        """

        self._creation_date = creation_date

    @property
    def application(self):
        """Gets the application of this FidoDeviceResource.  # noqa: E501

        Associated U2F application ID  # noqa: E501

        :return: The application of this FidoDeviceResource.  # noqa: E501
        :rtype: str
        """
        return self._application

    @application.setter
    def application(self, application):
        """Sets the application of this FidoDeviceResource.

        Associated U2F application ID  # noqa: E501

        :param application: The application of this FidoDeviceResource.  # noqa: E501
        :type: str
        """

        self._application = application

    @property
    def counter(self):
        """Gets the counter of this FidoDeviceResource.  # noqa: E501

        Value used in the Fido U2F endpoints  # noqa: E501

        :return: The counter of this FidoDeviceResource.  # noqa: E501
        :rtype: int
        """
        return self._counter

    @counter.setter
    def counter(self, counter):
        """Sets the counter of this FidoDeviceResource.

        Value used in the Fido U2F endpoints  # noqa: E501

        :param counter: The counter of this FidoDeviceResource.  # noqa: E501
        :type: int
        """

        self._counter = counter

    @property
    def device_data(self):
        """Gets the device_data of this FidoDeviceResource.  # noqa: E501

        A Json representation of low-level attributes of this enrollment  # noqa: E501

        :return: The device_data of this FidoDeviceResource.  # noqa: E501
        :rtype: str
        """
        return self._device_data

    @device_data.setter
    def device_data(self, device_data):
        """Sets the device_data of this FidoDeviceResource.

        A Json representation of low-level attributes of this enrollment  # noqa: E501

        :param device_data: The device_data of this FidoDeviceResource.  # noqa: E501
        :type: str
        """

        self._device_data = device_data

    @property
    def device_hash_code(self):
        """Gets the device_hash_code of this FidoDeviceResource.  # noqa: E501


        :return: The device_hash_code of this FidoDeviceResource.  # noqa: E501
        :rtype: int
        """
        return self._device_hash_code

    @device_hash_code.setter
    def device_hash_code(self, device_hash_code):
        """Sets the device_hash_code of this FidoDeviceResource.


        :param device_hash_code: The device_hash_code of this FidoDeviceResource.  # noqa: E501
        :type: int
        """

        self._device_hash_code = device_hash_code

    @property
    def device_key_handle(self):
        """Gets the device_key_handle of this FidoDeviceResource.  # noqa: E501


        :return: The device_key_handle of this FidoDeviceResource.  # noqa: E501
        :rtype: str
        """
        return self._device_key_handle

    @device_key_handle.setter
    def device_key_handle(self, device_key_handle):
        """Sets the device_key_handle of this FidoDeviceResource.


        :param device_key_handle: The device_key_handle of this FidoDeviceResource.  # noqa: E501
        :type: str
        """

        self._device_key_handle = device_key_handle

    @property
    def device_registration_conf(self):
        """Gets the device_registration_conf of this FidoDeviceResource.  # noqa: E501


        :return: The device_registration_conf of this FidoDeviceResource.  # noqa: E501
        :rtype: str
        """
        return self._device_registration_conf

    @device_registration_conf.setter
    def device_registration_conf(self, device_registration_conf):
        """Sets the device_registration_conf of this FidoDeviceResource.


        :param device_registration_conf: The device_registration_conf of this FidoDeviceResource.  # noqa: E501
        :type: str
        """

        self._device_registration_conf = device_registration_conf

    @property
    def last_access_time(self):
        """Gets the last_access_time of this FidoDeviceResource.  # noqa: E501

        When this device was last used (eg. in order to log into an application)  # noqa: E501

        :return: The last_access_time of this FidoDeviceResource.  # noqa: E501
        :rtype: datetime
        """
        return self._last_access_time

    @last_access_time.setter
    def last_access_time(self, last_access_time):
        """Sets the last_access_time of this FidoDeviceResource.

        When this device was last used (eg. in order to log into an application)  # noqa: E501

        :param last_access_time: The last_access_time of this FidoDeviceResource.  # noqa: E501
        :type: datetime
        """

        self._last_access_time = last_access_time

    @property
    def status(self):
        """Gets the status of this FidoDeviceResource.  # noqa: E501


        :return: The status of this FidoDeviceResource.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this FidoDeviceResource.


        :param status: The status of this FidoDeviceResource.  # noqa: E501
        :type: str
        """
        allowed_values = ["active", "compromised"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def display_name(self):
        """Gets the display_name of this FidoDeviceResource.  # noqa: E501

        Device name suitable for display to end-users  # noqa: E501

        :return: The display_name of this FidoDeviceResource.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this FidoDeviceResource.

        Device name suitable for display to end-users  # noqa: E501

        :param display_name: The display_name of this FidoDeviceResource.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def description(self):
        """Gets the description of this FidoDeviceResource.  # noqa: E501


        :return: The description of this FidoDeviceResource.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FidoDeviceResource.


        :param description: The description of this FidoDeviceResource.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FidoDeviceResource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FidoDeviceResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
