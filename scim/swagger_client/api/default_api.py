# coding: utf-8

"""
    SCIM API

    Gluu SCIM 2.0 server API. Developers can think of SCIM as a REST API with endpoints exposing CRUD functionality (create, update, retrieve and delete) for identity management resources such as users, groups, and fido devices.   # noqa: E501

    OpenAPI spec version: 4.2.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DefaultApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def bulk_post(self, body, **kwargs):  # noqa: E501
        """bulk_post  # noqa: E501

        Send several resource operations in a single request (see section 3.7 of RFC 7644)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BulkRequest body: Payload describing the operations to perform (required)
        :return: BulkData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bulk_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.bulk_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def bulk_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """bulk_post  # noqa: E501

        Send several resource operations in a single request (see section 3.7 of RFC 7644)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BulkRequest body: Payload describing the operations to perform (required)
        :return: BulkData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bulk_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `bulk_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/scim+json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/scim+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['testmode']  # noqa: E501

        return self.api_client.call_api(
            '/Bulk', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BulkData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fido2_devices_get(self, **kwargs):  # noqa: E501
        """fido2_devices_get  # noqa: E501

        Query Fido 2 resources  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fido2_devices_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str attributes: See section 3.9 of RFC 7644
        :param str excluded_attributes: See section 3.9 of RFC 7644
        :param str user_id: Used to restrict the search to fido 2 resources owned by a specific user
        :param str filter: See section 3.4.2.2 of RFC 7644
        :param int start_index:
        :param int count:
        :param str sort_by:
        :param str sort_oder:
        :return: Fido2ListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.fido2_devices_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.fido2_devices_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def fido2_devices_get_with_http_info(self, **kwargs):  # noqa: E501
        """fido2_devices_get  # noqa: E501

        Query Fido 2 resources  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fido2_devices_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str attributes: See section 3.9 of RFC 7644
        :param str excluded_attributes: See section 3.9 of RFC 7644
        :param str user_id: Used to restrict the search to fido 2 resources owned by a specific user
        :param str filter: See section 3.4.2.2 of RFC 7644
        :param int start_index:
        :param int count:
        :param str sort_by:
        :param str sort_oder:
        :return: Fido2ListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['attributes', 'excluded_attributes', 'user_id', 'filter', 'start_index', 'count', 'sort_by', 'sort_oder']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fido2_devices_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'attributes' in params:
            query_params.append(('attributes', params['attributes']))  # noqa: E501
        if 'excluded_attributes' in params:
            query_params.append(('excludedAttributes', params['excluded_attributes']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'start_index' in params:
            query_params.append(('startIndex', params['start_index']))  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sortBy', params['sort_by']))  # noqa: E501
        if 'sort_oder' in params:
            query_params.append(('sortOder', params['sort_oder']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/scim+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['testmode']  # noqa: E501

        return self.api_client.call_api(
            '/Fido2Devices', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Fido2ListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fido2_devices_id_delete(self, id, **kwargs):  # noqa: E501
        """fido2_devices_id_delete  # noqa: E501

        Deletes a Fido 2 resource  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fido2_devices_id_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the resource to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.fido2_devices_id_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.fido2_devices_id_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def fido2_devices_id_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """fido2_devices_id_delete  # noqa: E501

        Deletes a Fido 2 resource  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fido2_devices_id_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the resource to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fido2_devices_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `fido2_devices_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/scim+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['testmode']  # noqa: E501

        return self.api_client.call_api(
            '/Fido2Devices/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fido2_devices_id_get(self, id, **kwargs):  # noqa: E501
        """fido2_devices_id_get  # noqa: E501

        Retrieves a Fido 2 device by Id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fido2_devices_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str attributes: See section 3.9 of RFC 7644
        :param str excluded_attributes: See section 3.9 of RFC 7644
        :return: Fido2DeviceResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.fido2_devices_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.fido2_devices_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def fido2_devices_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """fido2_devices_id_get  # noqa: E501

        Retrieves a Fido 2 device by Id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fido2_devices_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str attributes: See section 3.9 of RFC 7644
        :param str excluded_attributes: See section 3.9 of RFC 7644
        :return: Fido2DeviceResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'attributes', 'excluded_attributes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fido2_devices_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `fido2_devices_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'attributes' in params:
            query_params.append(('attributes', params['attributes']))  # noqa: E501
        if 'excluded_attributes' in params:
            query_params.append(('excludedAttributes', params['excluded_attributes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/scim+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['testmode']  # noqa: E501

        return self.api_client.call_api(
            '/Fido2Devices/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Fido2DeviceResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fido2_devices_id_put(self, body, id, **kwargs):  # noqa: E501
        """fido2_devices_id_put  # noqa: E501

        Updates a Fido 2 resource. Update works in a replacement fashion&amp;#58; every attribute value found in the payload sent will replace the one in the existing resource representation. Attributes  not passed in the payload will be left intact.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fido2_devices_id_put(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Fido2DeviceResource body: Payload with the data to replace in the existing device identified by the id param (required)
        :param str id: (required)
        :param str attributes: See section 3.9 of RFC 7644
        :param str excluded_attributes: See section 3.9 of RFC 7644
        :return: Fido2DeviceResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.fido2_devices_id_put_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.fido2_devices_id_put_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def fido2_devices_id_put_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """fido2_devices_id_put  # noqa: E501

        Updates a Fido 2 resource. Update works in a replacement fashion&amp;#58; every attribute value found in the payload sent will replace the one in the existing resource representation. Attributes  not passed in the payload will be left intact.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fido2_devices_id_put_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Fido2DeviceResource body: Payload with the data to replace in the existing device identified by the id param (required)
        :param str id: (required)
        :param str attributes: See section 3.9 of RFC 7644
        :param str excluded_attributes: See section 3.9 of RFC 7644
        :return: Fido2DeviceResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id', 'attributes', 'excluded_attributes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fido2_devices_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `fido2_devices_id_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `fido2_devices_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'attributes' in params:
            query_params.append(('attributes', params['attributes']))  # noqa: E501
        if 'excluded_attributes' in params:
            query_params.append(('excludedAttributes', params['excluded_attributes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/scim+json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/scim+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['testmode']  # noqa: E501

        return self.api_client.call_api(
            '/Fido2Devices/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Fido2DeviceResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fido2_devices_search_post(self, body, **kwargs):  # noqa: E501
        """fido2_devices_search_post  # noqa: E501

        Query Fido 2 resources  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fido2_devices_search_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SearchRequest body: Payload that represents the search criteria (required)
        :param str user_id: Used to restrict the search to fido 2 resources owned by a specific user
        :return: Fido2ListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.fido2_devices_search_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.fido2_devices_search_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def fido2_devices_search_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """fido2_devices_search_post  # noqa: E501

        Query Fido 2 resources  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fido2_devices_search_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SearchRequest body: Payload that represents the search criteria (required)
        :param str user_id: Used to restrict the search to fido 2 resources owned by a specific user
        :return: Fido2ListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fido2_devices_search_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `fido2_devices_search_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/scim+json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/scim+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['testmode']  # noqa: E501

        return self.api_client.call_api(
            '/Fido2Devices/.search', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Fido2ListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fido_devices_get(self, **kwargs):  # noqa: E501
        """fido_devices_get  # noqa: E501

        Query Fido resources  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fido_devices_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str attributes: See section 3.9 of RFC 7644
        :param str excluded_attributes: See section 3.9 of RFC 7644
        :param str user_id: Used to restrict the search to fido resources owned by a specific user
        :param str filter: See section 3.4.2.2 of RFC 7644
        :param int start_index:
        :param int count:
        :param str sort_by:
        :param str sort_oder:
        :return: FidoListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.fido_devices_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.fido_devices_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def fido_devices_get_with_http_info(self, **kwargs):  # noqa: E501
        """fido_devices_get  # noqa: E501

        Query Fido resources  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fido_devices_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str attributes: See section 3.9 of RFC 7644
        :param str excluded_attributes: See section 3.9 of RFC 7644
        :param str user_id: Used to restrict the search to fido resources owned by a specific user
        :param str filter: See section 3.4.2.2 of RFC 7644
        :param int start_index:
        :param int count:
        :param str sort_by:
        :param str sort_oder:
        :return: FidoListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['attributes', 'excluded_attributes', 'user_id', 'filter', 'start_index', 'count', 'sort_by', 'sort_oder']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fido_devices_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'attributes' in params:
            query_params.append(('attributes', params['attributes']))  # noqa: E501
        if 'excluded_attributes' in params:
            query_params.append(('excludedAttributes', params['excluded_attributes']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'start_index' in params:
            query_params.append(('startIndex', params['start_index']))  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sortBy', params['sort_by']))  # noqa: E501
        if 'sort_oder' in params:
            query_params.append(('sortOder', params['sort_oder']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/scim+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['testmode']  # noqa: E501

        return self.api_client.call_api(
            '/FidoDevices', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FidoListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fido_devices_id_delete(self, id, **kwargs):  # noqa: E501
        """fido_devices_id_delete  # noqa: E501

        Deletes a Fido resource  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fido_devices_id_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the resource to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.fido_devices_id_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.fido_devices_id_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def fido_devices_id_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """fido_devices_id_delete  # noqa: E501

        Deletes a Fido resource  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fido_devices_id_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the resource to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fido_devices_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `fido_devices_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/scim+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['testmode']  # noqa: E501

        return self.api_client.call_api(
            '/FidoDevices/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fido_devices_id_get(self, id, **kwargs):  # noqa: E501
        """fido_devices_id_get  # noqa: E501

        Retrieves a U2F/Super Gluu device by Id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fido_devices_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str attributes: See section 3.9 of RFC 7644
        :param str excluded_attributes: See section 3.9 of RFC 7644
        :return: FidoDeviceResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.fido_devices_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.fido_devices_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def fido_devices_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """fido_devices_id_get  # noqa: E501

        Retrieves a U2F/Super Gluu device by Id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fido_devices_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str attributes: See section 3.9 of RFC 7644
        :param str excluded_attributes: See section 3.9 of RFC 7644
        :return: FidoDeviceResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'attributes', 'excluded_attributes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fido_devices_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `fido_devices_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'attributes' in params:
            query_params.append(('attributes', params['attributes']))  # noqa: E501
        if 'excluded_attributes' in params:
            query_params.append(('excludedAttributes', params['excluded_attributes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/scim+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['testmode']  # noqa: E501

        return self.api_client.call_api(
            '/FidoDevices/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FidoDeviceResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fido_devices_id_put(self, body, id, **kwargs):  # noqa: E501
        """fido_devices_id_put  # noqa: E501

        Updates a Fido resource. Update works in a replacement fashion&amp;#58; every attribute value found in the payload sent will replace the one in the existing resource representation. Attributes  not passed in the payload will be left intact.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fido_devices_id_put(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FidoDeviceResource body: Payload with the data to replace in the existing device identified by the id param (required)
        :param str id: (required)
        :param str attributes: See section 3.9 of RFC 7644
        :param str excluded_attributes: See section 3.9 of RFC 7644
        :return: FidoDeviceResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.fido_devices_id_put_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.fido_devices_id_put_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def fido_devices_id_put_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """fido_devices_id_put  # noqa: E501

        Updates a Fido resource. Update works in a replacement fashion&amp;#58; every attribute value found in the payload sent will replace the one in the existing resource representation. Attributes  not passed in the payload will be left intact.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fido_devices_id_put_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FidoDeviceResource body: Payload with the data to replace in the existing device identified by the id param (required)
        :param str id: (required)
        :param str attributes: See section 3.9 of RFC 7644
        :param str excluded_attributes: See section 3.9 of RFC 7644
        :return: FidoDeviceResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id', 'attributes', 'excluded_attributes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fido_devices_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `fido_devices_id_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `fido_devices_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'attributes' in params:
            query_params.append(('attributes', params['attributes']))  # noqa: E501
        if 'excluded_attributes' in params:
            query_params.append(('excludedAttributes', params['excluded_attributes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/scim+json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/scim+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['testmode']  # noqa: E501

        return self.api_client.call_api(
            '/FidoDevices/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FidoDeviceResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fido_devices_search_post(self, body, **kwargs):  # noqa: E501
        """fido_devices_search_post  # noqa: E501

        Query Fido resources  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fido_devices_search_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SearchRequest body: Payload that represents the search criteria (required)
        :param str user_id: Used to restrict the search to fido resources owned by a specific user
        :return: FidoListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.fido_devices_search_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.fido_devices_search_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def fido_devices_search_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """fido_devices_search_post  # noqa: E501

        Query Fido resources  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fido_devices_search_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SearchRequest body: Payload that represents the search criteria (required)
        :param str user_id: Used to restrict the search to fido resources owned by a specific user
        :return: FidoListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fido_devices_search_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `fido_devices_search_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/scim+json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/scim+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['testmode']  # noqa: E501

        return self.api_client.call_api(
            '/FidoDevices/.search', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FidoListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_post(self, body, **kwargs):  # noqa: E501
        """search_post  # noqa: E501

        Search (from system root) for one or more resource (see section 3.4.3 of RFC 7644)   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SearchRequest body: Payload that represents the search criteria (required)
        :return: GenericListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.search_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def search_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """search_post  # noqa: E501

        Search (from system root) for one or more resource (see section 3.4.3 of RFC 7644)   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SearchRequest body: Payload that represents the search criteria (required)
        :return: GenericListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `search_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/scim+json', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/scim+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['testmode']  # noqa: E501

        return self.api_client.call_api(
            '/.search', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GenericListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
