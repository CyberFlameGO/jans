openapi: 3.0.1
info:
  title: jans-config-api
  description: jans-config-api - Authorization services
  contact:
    email: xxx@gluu.org
  license:
    name: License
    url: 'https://github.com/JanssenProject/blob/master/LICENSE'
  version: '1.0.0'
servers:
  - url: 'https://jans.io/'
tags:
  - name: developers
    description: jans-config-api enables access to the features available via the existing Jans Authorization Server API.
  - name: Attribute
  - name: Default Authentication Method
  - name: Cache Configuration
  - name: Cache Configuration – Memcached
  - name: Cache Configuration – Redis
  - name: Cache Configuration – in-Memory
  - name: Cache Configuration – Native-Persistence
  - name: Configuration – Properties
  - name: Configuration – Fido2
  - name: Configuration – SMTP
  - name: Configuration – Logging
  - name: Configuration – JWK - JSON Web Key (JWK)
  - name: Custom Scripts
  - name: Database - LDAP configuration
  - name: OAuth - OpenID Connect - Clients
  - name: OAuth - OpenID Connect - Sector Identifiers
  - name: OAuth - UMA Resources
  - name: OAuth - Scopes
paths:
  /jans-config-api/api/v1/jans-auth-server/config:
    get:
      summary: Gets all Jans authorization server configuration properties.
      description: Gets all Jans authorization server configuration properties.
      operationId: get-properties
      security:
        - jans-auth: [https://jans.io/oauth/jans-auth-server/config/properties.readonly]
      tags:
        - Configuration – Properties
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: AppConfiguration
                description: Jans Authorization Server config properties.
                items:
                  $ref: '#/components/schemas/AppConfiguration'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      summary: Partially modifies Jans authorization server Application configuration properties.
      description: Partially modifies Jans authorization server AppConfiguration properties.
      operationId: patch-properties
      security:
        - jans-auth: [https://jans.io/oauth/jans-auth-server/config/properties.write]
      tags:
        - Configuration – Properties
      requestBody:
        content:
          application/json:
            schema:
              type: string 
              $ref: '#/components/schemas/PatchRequest'
              description: String representing patch-document.
              example: '[ {op:replace, path: loggingLevel, value: DEBUG } ]'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: AppConfiguration
                description: Jans authorization server config properties.
                items:
                  $ref: '#/components/schemas/AppConfiguration'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /jans-config-api/api/v1/fido2/config:
    get:
      summary: Gets Jans Authorization Server Fido2 configuration properties.
      description: Gets Jans Authorization Server Fido2 configuration properties.
      operationId: get-properties-fido2
      tags:
        - Configuration – Fido2
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: Fido2 configuration
                items:
                  type: object
                  description: Fido2 configuration properties.
                  properties:
                    authenticatorCertsFolder:
                      description: Authenticators certificates fodler.
                      type: string
                      minLength: 1
                    mdsAccessToken:
                      description: MDS Access token.
                      type: string
                      minLength: 1
                    mdsCertsFolder:
                      description: MDS TOC root certificates folder.
                      type: string
                      minLength: 1
                    mdsTocsFolder:
                      description: MDS TOC files folder.
                      type: string
                      minLength: 1
                    userAutoEnrollment:
                      description: Allow to enroll users on enrollment/authentication requests.
                      type: boolean
                    unfinishedRequestExpiration:
                      description: Expiration time in seconds for pending enrollment/authentication requests
                      type: integer
                      multipleOf: 1
                      maximum: 2147483647
                      minimum: 0
                      exclusiveMaximum: false
                      exclusiveMinimum: false
                    authenticationHistoryExpiration:
                      description: Expiration time in seconds for approved authentication requests.
                      type: integer
                      multipleOf: 1
                      maximum: 2147483647
                      minimum: 0
                      exclusiveMaximum: false
                      exclusiveMinimum: false
                    serverMetadataFolder:
                      description: Authenticators metadata in json format.
                      type: string
                      minLength: 1
                      example: virtual devices
                    disableFido2:
                      description: Enable/Disable Fido2 endpoints.
                      type: boolean
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - jans-auth: [https://jans.io/oauth/config/fido2.readonly]
    put:
      summary: Updates Fido2 configuration properties.
      description: Updates Fido2 configuration properties.
      operationId: put-properties-fido2
      tags:
        - Configuration – Fido2
      requestBody:
        content:
          application/json:
            schema:
              title: Fido2 configuration
              items:
                type: object
                description: Fido2 configuration properties.
                properties:
                  authenticatorCertsFolder:
                    description: Authenticators certificates fodler.
                    type: string
                    minLength: 1
                  mdsAccessToken:
                    description: MDS Access token.
                    type: string
                    minLength: 1
                  mdsCertsFolder:
                    description: MDS TOC root certificates folder.
                    type: string
                    minLength: 1
                  mdsTocsFolder:
                    description: MDS TOC files folder.
                    type: string
                    minLength: 1
                  userAutoEnrollment:
                    description: Allow to enroll users on enrollment/authentication requests.
                    type: boolean
                  unfinishedRequestExpiration:
                    description: Expiration time in seconds for pending enrollment/authentication requests
                    type: integer
                    multipleOf: 1
                    maximum: 2147483647
                    minimum: 0
                    exclusiveMaximum: false
                    exclusiveMinimum: false
                  authenticationHistoryExpiration:
                    description: Expiration time in seconds for approved authentication requests.
                    type: integer
                    multipleOf: 1
                    maximum: 2147483647
                    minimum: 0
                    exclusiveMaximum: false
                    exclusiveMinimum: false
                  serverMetadataFolder:
                    description: Authenticators metadata in json format.
                    type: string
                    minLength: 1
                    example: virtual devices
                  disableFido2:
                    description: Enable/Disable Fido2 endpoints.
                    type: boolean
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - jans-auth: [https://jans.io/oauth/config/fido2.write]
    parameters: []
  /jans-config-api/api/v1/attributes:
    get:
      summary: Gets a list of Gluu attributes.
      description: 'Gets all attributes. Optionally max-size of the result, attribute status and pattern can be provided.'
      operationId: get-attributes
      tags:
        - Attribute
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: Gluu Attributes
                description: List of all attribute.
                type: array
                items:
                  $ref: '#/components/schemas/GluuAttribute'
        '401':
          description: Unauthorized
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - jans-auth: [https://jans.io/oauth/config/attributes.readonly]
      parameters:
        - schema:
            type: integer
            default: 50
          in: query
          name: limit
          description: Search size - max size of the results to return.
        - schema:
            type: string
          in: query
          name: pattern
          description: Search pattern.
        - schema:
            type: string
            default: all
          in: query
          name: status
          description: Status of the attribute
    post:
      summary: Adds a new attribute.
      description: Adds a new attribute.
      operationId: post-attributes
      tags:
        - Attribute
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/GluuAttribute'
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GluuAttribute'
        '401':
          description: Unauthorized
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - jans-auth: [https://jans.io/oauth/config/attributes.write]
    put:
      summary: Updates an existing attribute.
      description: Updates an existing attribute.
      operationId: put-attributes
      tags:
        - Attribute
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GluuAttribute'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: GluuAttribute
                type: object
                items:
                  $ref: '#/components/schemas/GluuAttribute'
        '401':
          description: Unauthorized
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - jans-auth: [https://jans.io/oauth/config/attributes.write]
    parameters: []
  '/jans-config-api/api/v1/attributes/{inum}':
    parameters:
      - name: inum
        in: path
        required: true
        description: Attribute ID.
        schema:
          type: string
    get:
      summary: Gets an attribute based on inum.
      description: Gets an attribute based on inum.
      operationId: get-attributes-by-inum
      tags:
        - Attribute
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GluuAttribute'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - jans-auth: [https://jans.io/oauth/config/attributes.readonly]
    delete:
      summary: Deletes an attribute based on inum.
      description: Deletes an attribute based on inum.
      operationId: delete-attributes-by-inum
      tags:
        - Attribute
      responses:
        '204':
          description: No Content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - jans-auth: [https://jans.io/oauth/config/attributes.write]
    patch:
      summary: Partially modify a GluuAttribute.
      description: Partially modify a GluuAttribute.
      operationId: patch-attributes-by-inum
      security:
        - jans-auth: [https://jans.io/oauth/config/attributes.write]
      tags:
        - Attribute
      requestBody:
        content:
          application/json:
            schema:
              type: string 
              $ref: '#/components/schemas/PatchRequest'
              description: String representing patch-document.
              example: '[ {op:replace, path: displayName, value: \"CustomAttribute\" } ]'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GluuAttribute'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /jans-config-api/api/v1/acrs:
    get:
      summary: Gets default authentication method.
      description: Gets default authentication method.
      operationId: get-acrs
      tags:
        - Default Authentication Method
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: AuthenticationMethod
                description: Default authentication method.
                type: object
                properties:
                  defaultAcr:
                    type: string
                  oxtrustAcr:
                    type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - jans-auth: [https://jans.io/oauth/config/acrs.readonly]
    put:
      summary: Updates default authentication method.
      description: Updates default authentication method.
      operationId: put-acrs
      tags:
        - Default Authentication Method
      requestBody:
        content:
          application/json:
            schema:
              title: AuthenticationMethod
              description: Authentication method to be updated as default.
              type: object
              properties:
                defaultAcr:
                  type: string
                oxtrustAcr:
                  type: string
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - jans-auth: [https://jans.io/oauth/config/acrs.write]
    parameters: []
  /jans-config-api/api/v1/config/database/ldap:
    get:
      summary: Gets list of existing LDAP configurations.
      description: Gets list of existing LDAP configurations. 
      operationId: get-config-database-ldap
      tags:
        - Database - LDAP configuration
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: LdapConfiguration
                description: List of configured LDAP configuration.
                type: array
                items:
                  $ref: '#/components/schemas/LdapConfiguration'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - jans-auth: [https://jans.io/oauth/config/database/ldap.readonly]
    post:
      summary: Adds a new LDAP configuration.
      description: Adds a new LDAP configuration.
      operationId: post-config-database-ldap
      tags:
        - Database - LDAP configuration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LdapConfiguration'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LdapConfiguration'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - jans-auth: [https://jans.io/oauth/config/database/ldap.write]
    put:
      summary: Updates LDAP configuration.
      description: Updates LDAP configuration.
      operationId: put-config-database-ldap
      tags:
        - Database - LDAP configuration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LdapConfiguration'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LdapConfiguration'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - jans-auth: [https://jans.io/oauth/config/database/ldap.write]
    parameters: []
  '/jans-config-api/api/v1/config/database/ldap/{name}':
    parameters:
      - name: name
        in: path
        required: true
        description: Name of LDAP configuration.
        schema:
          type: string
    get:
      summary: Gets an LDAP configuration by name.
      description: Gets an LDAP configuration by name.
      operationId: get-config-database-ldap-by-name
      tags:
        - Database - LDAP configuration
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LdapConfiguration'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - jans-auth: [https://jans.io/oauth/config/database/ldap.readonly]
    delete:
      summary: Deletes an LDAP configuration.
      description: Deletes an LDAP configuration.
      operationId: delete-config-database-ldap-by-name
      tags:
        - Database - LDAP configuration
      responses:
        '204':
          description: No Content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - jans-auth: [https://jans.io/oauth/config/database/ldap.write]
    patch:
      summary: Partially modify an LDAP configuration.
      description: Partially modify an LDAP configuration.
      operationId: patch-config-database-ldap-by-name
      security:
        - jans-auth: [https://jans.io/oauth/config/database/ldap.write]
      tags:
        - Database - LDAP configuration
      requestBody:
        content:
          application/json:
            schema:
              type: string 
              $ref: '#/components/schemas/PatchRequest'
              description: String representing patch-document.
              example: '[ {op:replace, path: maxConnections, value: 8 } ]'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LdapConfiguration'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /jans-config-api/api/v1/config/database/ldap/test:
    post:
      summary: Tests a LDAP configurations by name.
      description: Tests a LDAP configurations by name.
      operationId: post-config-database-ldap-test
      tags:
        - Database - LDAP configuration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LdapConfiguration'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
                description: LDAP connection status true if connection is successfully established.
                  
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - jans-auth: [https://jans.io/oauth/config/database/ldap.readonly]
  /jans-config-api/api/v1/config/database/couchbase:
    get:
      summary: Gets list of existing Couchbase configurations.
      description: Gets list of existing Couchbase configurations. 
      operationId: get-config-database-couchbase
      tags:
        - Database - Couchbase configuration
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: CouchbaseConfiguration
                description: List of configured Couchbase configuration.
                type: array
                items:
                  $ref: '#/components/schemas/CouchbaseConfiguration'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - jans-auth: [https://jans.io/oauth/config/database/couchbase.readonly]
    post:
      summary: Adds a new Couchbase configuration.
      description: Adds a new Couchbase configuration.
      operationId: post-config-database-couchbase
      tags:
        - Database - Couchbase configuration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CouchbaseConfiguration'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CouchbaseConfiguration'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - jans-auth: [https://jans.io/oauth/config/database/couchbase.write]
    put:
      summary: Updates Couchbase configuration.
      description: Updates Couchbase configuration.
      operationId: put-config-database-couchbase
      tags:
        - Database - Couchbase configuration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CouchbaseConfiguration'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CouchbaseConfiguration'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - jans-auth: [https://jans.io/oauth/config/database/couchbase.write]
    parameters: []
  /jans-config-api/api/v1/config/database/couchbase/{name}:
    parameters:
      - name: name
        in: path
        required: true
        description: Name of Couchbase configuration.
        schema:
          type: string
    get:
      summary: Gets a Couchbase configurations by name.
      description: Gets a Couchbase configurations by name.
      operationId: get-config-database-couchbase-by-name
      tags:
        - Database - Couchbase configuration
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: CouchbaseConfiguration
                description: List of configured Couchbase configuration.
                $ref: '#/components/schemas/CouchbaseConfiguration'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - jans-auth: [https://jans.io/oauth/config/database/couchbase.readonly]
    patch:
      summary: Partially modify an Couchbase configuration.
      description: Partially modify an Couchbase configuration.
      operationId: patch-config-database-couchbase-by-name
      tags:
        - Database - Couchbase configuration
      requestBody:
        content:
          application/json:
            schema:
              type: string 
              $ref: '#/components/schemas/PatchRequest'
              description: String representing patch-document.
              example: '[ {op:replace, path: maxConnections, value: 8 } ]'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CouchbaseConfiguration'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - jans-auth: [https://jans.io/oauth/config/database/couchbase.write]
    delete:
      summary: Deletes a Couchbase configurations by name.
      description: Deletes a Couchbase configurations by name.
      operationId: delete-config-database-couchbase-by-name
      tags:
        - Database - Couchbase configuration
      responses:
        '204':
          description: No Content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - jans-auth: [https://jans.io/oauth/config/database/couchbase.write]
  /jans-config-api/api/v1/config/database/couchbase/test:
    post:
      summary: Tests a Couchbase configurations by name.
      description: Tests a Couchbase configurations by name.
      operationId: post-config-database-couchbase-test
      tags:
        - Database - Couchbase configuration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CouchbaseConfiguration'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
                description: Couchbase connection status true if connection is successfully established.
                  
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - jans-auth: [https://jans.io/oauth/config/database/couchbase.readonly]
  /jans-config-api/api/v1/config/scripts:
    get:
      summary: Gets a list of custom scripts.
      description: Gets a list of custom scripts.
      operationId: get-config-scripts
      tags:
        - Custom Scripts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomScript'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - jans-auth: [https://jans.io/oauth/config/scripts.readonly]
    post:
      summary: Adds a new custom script.
      description: Adds a new custom script.
      operationId: post-config-scripts
      tags:
        - Custom Scripts
      responses:
        '201':
          description: CREATED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomScript'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'      
      security:
        - jans-auth: [https://jans.io/oauth/config/scripts.write]
    put:
      summary: Updates a custom script.
      description: Updates a custom script.
      operationId: put-config-scripts
      tags:
        - Custom Scripts
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CustomScript'
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - jans-auth: [https://jans.io/oauth/config/scripts.write]
  /jans-config-api/api/v1/config/scripts/type/{type}:
    parameters:
      - schema:
          type: string
          enum:
            - '- person_authentication'
            - '- introspection'
            - '- resource_owner_password_credentials'
            - '- application_session'
            - '- cache_refresh'
            - '- update_user'
            - '- user_registration'
            - '- client_registration'
            - '- id_generator'
            - '- uma_rpt_policy'
            - '- uma_rpt_claims'
            - '- uma_claims_gathering'
            - '- consent_gathering'
            - '- dynamic_scope'
            - '- spontaneous_scope'
            - '- end_session'
            - '- post_authn'
            - '- scim'
            - '- ciba_end_user_notification'
            - '- persistence_extension'
            - '- idp'
        name: type
        in: path
        description: Script type.
        required: true
      - schema:
          type: string
        in: query
        name: pattern
        description: Search pattern.
      - schema:
          type: integer
          default: 50
        in: query
        name: limit
        description: Search size - max size of the results to return.
    get:
      summary: Gets list of scripts by type.
      description: Gets list of scripts by type.
      operationId: get-config-scripts-by-type
      tags:
        - Custom Scripts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomScript'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - jans-auth: [https://jans.io/oauth/config/scripts.readonly]
  /jans-config-api/api/v1/config/scripts/inum/{inum}:
    parameters:
      - schema:
          type: string
        name: inum
        in: path
        required: true
        description: Script identifier.
    get:
      summary: Gets a script by Inum.
      description: Gets a script by Inum.
      operationId: get-config-scripts-by-inum
      tags:
        - Custom Scripts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomScript'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - jans-auth: [https://jans.io/oauth/config/scripts.readonly]
  /jans-config-api/api/v1/config/scripts/{inum}:
    parameters:
      - schema:
          type: string
        name: inum
        in: path
        required: true
        description: Script identifier.
    delete:
      summary: Deletes a custom script.
      description: Deletes a custom script.
      operationId: delete-config-scripts-by-inum
      tags:
        - Custom Scripts
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      security:
        - jans-auth: [https://jans.io/oauth/config/scripts.write]
  /jans-config-api/api/v1/config/cache:
    get:
      summary: Returns cache configuration.
      description: Returns cache configuration.
      operationId: get-config-cache
      tags:
        - Cache Configuration
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                description: Cache Configuration.
                properties:
                  cacheProviderType:
                    description: The cache Provider Type.
                    type: string
                    enum:
                      - IN_MEMORY
                      - MEMCACHED
                      - REDIS
                      - NATIVE_PERSISTENCE
                  memcachedConfiguration:
                    description: Memcached cache configuration.
                    type: object
                    required:
                      - servers
                      - maxOperationQueueLength
                      - bufferSize
                      - defaultPutExpiration
                      - memcachedConnectionFactoryType
                    properties:
                      servers:
                        type: string
                        description: Server details separated by spaces.
                        format: url
                        minLength: 1
                      maxOperationQueueLength:
                        type: integer
                        description: Maximum operation Queue Length.
                        default: 99999999
                        multipleOf: 1
                        maximum: 2147483647
                        minimum: 1
                        exclusiveMaximum: false
                        exclusiveMinimum: false
                      bufferSize:
                        type: integer
                        description: Buffer Size.
                        default: 32768
                        multipleOf: 1
                        maximum: 2147483647
                        minimum: 1
                        exclusiveMaximum: false
                        exclusiveMinimum: false
                      defaultPutExpiration:
                        type: integer
                        description: Expiration timeout value.
                        default: 60
                        multipleOf: 1
                        maximum: 2147483647
                        minimum: 1
                        exclusiveMaximum: false
                        exclusiveMinimum: false
                      memcachedConnectionFactoryType:
                        type: string
                        description: The MemcachedConnectionFactoryType Type.
                        enum:
                          - DEFAULT
                          - BINARY
                  redisConfiguration:
                    type: object
                    description: Cache Configuration
                    properties:
                      redisProviderType:
                        description: Type of connection.
                        type: string
                        enum:
                          - STANDALONE
                          - CLUSTER
                          - SHARDED
                          - SENTINEL
                      servers:
                        description: 'server details separated by comma e.g. ''server1:8080server2:8081''.'
                        type: string
                        title: servers
                        format: url
                        minLength: 3
                      password:
                        description: Redis password.
                        type: string
                        minLength: 0
                      defaultPutExpiration:
                        description: defaultPutExpiration timeout value.
                        type: integer
                        multipleOf: 1
                        maximum: 2147483647
                        minimum: 1
                        exclusiveMaximum: false
                        exclusiveMinimum: false
                      sentinelMasterGroupName:
                        description: Sentinel Master Group Name (required if SENTINEL type of connection is selected).
                        type: string
                        minLength: 1
                      useSSL:
                        description: Enable SSL communication between Gluu Server and Redis cache.
                        type: boolean
                      sslTrustStoreFilePath:
                        description: Directory Path to Trust Store.
                        type: string
                        format: url
                        minLength: 1
                      maxIdleConnections:
                        description: The cap on the number of \idle\ instances in the pool. If max idle is set too low on heavily loaded systems it is possible you will see objects being destroyed and almost immediately new objects being created. This is a result of the active threads momentarily returning objects faster than they are requesting them causing the number of idle objects to rise above max idle. The best value for max idle for heavily loaded system will vary but the default is a good starting point.
                        type: integer
                        multipleOf: 1
                        maximum: 2147483647
                        minimum: 1
                        exclusiveMaximum: false
                        exclusiveMinimum: false
                      maxTotalConnections:
                        description: The number of maximum connection instances in the pool.
                        type: integer
                        multipleOf: 1
                        maximum: 2147483647
                        minimum: 1
                        exclusiveMaximum: false
                        exclusiveMinimum: false
                      connectionTimeout:
                        description: Connection time out.
                        type: integer
                        multipleOf: 1
                        maximum: 2147483647
                        minimum: 1
                        exclusiveMaximum: false
                        exclusiveMinimum: false
                      soTimeout:
                        description: With this option set to a non-zero timeout a read() call on the InputStream associated with this Socket will block for only this amount of time. If the timeout expires a java.net.SocketTimeoutException is raised though the Socket is still valid. The option must be enabled prior to entering the blocking operation to have effect. The timeout must be > 0. A timeout of zero is interpreted as an infinite timeout.
                        type: integer
                        multipleOf: 1
                        maximum: 2147483647
                        minimum: 1
                        exclusiveMaximum: false
                        exclusiveMinimum: false
                      maxRetryAttempts:
                        description: Maximum retry attempts in case of failure.
                        type: integer
                        multipleOf: 1
                        maximum: 2147483647
                        minimum: 1
                        exclusiveMaximum: false
                        exclusiveMinimum: false
                  inMemoryConfiguration:
                    type: object
                    description: Cache configuration.
                    properties:
                      defaultPutExpiration:
                        description: defaultPutExpiration timeout value.
                        type: integer
                        multipleOf: 1
                        maximum: 2147483647
                        minimum: 1
                        exclusiveMaximum: false
                        exclusiveMinimum: false
                  nativePersistenceConfiguration:
                    type: object
                    description: Cache configuration.
                    properties:
                      defaultPutExpiration:
                        description: defaultPutExpiration timeout value.
                        type: integer
                        multipleOf: 1
                        maximum: 2147483647
                        minimum: 1
                        default: 60
                        exclusiveMaximum: false
                        exclusiveMinimum: false
                      defaultCleanupBatchSize:
                        description: defaultCleanupBatchSize page size.
                        type: integer
                        multipleOf: 1
                        maximum: 2147483647
                        minimum: 25
                        default: 25
                        exclusiveMaximum: false
                        exclusiveMinimum: false
                      deleteExpiredOnGetRequest:
                        type: boolean
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          description: Internal Server Error
      security:
        - jans-auth: [https://jans.io/oauth/config/cache.readonly]
    patch:
      summary: Partially modifies cache configuration.
      description: Partially modifies cache configuration.
      operationId: patch-config-cache
      tags:
        - Cache Configuration
      requestBody:
        content:
          application/json:
            schema:
              type: string 
              $ref: '#/components/schemas/PatchRequest'
              description: String representing patch-document.
              example: '[ {op:replace, path: memcachedConfiguration, value: response.memcachedConfiguration } ]'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                description: Cache Configuration.
                properties:
                  cacheProviderType:
                    description: The cacheProvider Type.
                    type: string
                    enum:
                      - IN_MEMORY
                      - MEMCACHED
                      - REDIS
                      - NATIVE_PERSISTENCE
                  memcachedConfiguration:
                    description: Memcached cache configuration.
                    type: object
                    required:
                      - servers
                      - maxOperationQueueLength
                      - bufferSize
                      - defaultPutExpiration
                      - memcachedConnectionFactoryType
                    properties:
                      servers:
                        type: string
                        description: Server details separated by spaces.
                        format: url
                        minLength: 1
                      maxOperationQueueLength:
                        type: integer
                        description: Maximum operation Queue Length.
                        default: 99999999
                        multipleOf: 1
                        maximum: 2147483647
                        minimum: 1
                        exclusiveMaximum: false
                        exclusiveMinimum: false
                      bufferSize:
                        type: integer
                        description: Buffer Size.
                        default: 32768
                        multipleOf: 1
                        maximum: 2147483647
                        minimum: 1
                        exclusiveMaximum: false
                        exclusiveMinimum: false
                      defaultPutExpiration:
                        type: integer
                        description: Expiration timeout value.
                        default: 60
                        multipleOf: 1
                        maximum: 2147483647
                        minimum: 1
                        exclusiveMaximum: false
                        exclusiveMinimum: false
                      memcachedConnectionFactoryType:
                        type: string
                        description: The MemcachedConnectionFactoryType Type.
                        enum:
                          - DEFAULT
                          - BINARY
                  redisConfiguration:
                    type: object
                    description: Cache Configuration
                    properties:
                      redisProviderType:
                        description: Type of connection.
                        type: string
                        enum:
                          - STANDALONE
                          - CLUSTER
                          - SHARDED
                          - SENTINEL
                      servers:
                        description: 'server details separated by comma e.g. ''server1:8080server2:8081''.'
                        type: string
                        title: servers
                        format: url
                        minLength: 3
                      password:
                        description: Redis password.
                        type: string
                        minLength: 0
                      defaultPutExpiration:
                        description: defaultPutExpiration timeout value.
                        type: integer
                        multipleOf: 1
                        maximum: 2147483647
                        minimum: 1
                        exclusiveMaximum: false
                        exclusiveMinimum: false
                      sentinelMasterGroupName:
                        description: Sentinel Master Group Name (required if SENTINEL type of connection is selected).
                        type: string
                        minLength: 1
                      useSSL:
                        description: Enable SSL communication between Gluu Server and Redis cache.
                        type: boolean
                      sslTrustStoreFilePath:
                        description: Directory Path to Trust Store.
                        type: string
                        format: url
                        minLength: 1
                      maxIdleConnections:
                        description: The cap on the number of \idle\ instances in the pool. If max idle is set too low on heavily loaded systems it is possible you will see objects being destroyed and almost immediately new objects being created. This is a result of the active threads momentarily returning objects faster than they are requesting them causing the number of idle objects to rise above max idle. The best value for max idle for heavily loaded system will vary but the default is a good starting point.
                        type: integer
                        multipleOf: 1
                        maximum: 2147483647
                        minimum: 1
                        exclusiveMaximum: false
                        exclusiveMinimum: false
                      maxTotalConnections:
                        description: The number of maximum connection instances in the pool.
                        type: integer
                        multipleOf: 1
                        maximum: 2147483647
                        minimum: 1
                        exclusiveMaximum: false
                        exclusiveMinimum: false
                      connectionTimeout:
                        description: Connection time out.
                        type: integer
                        multipleOf: 1
                        maximum: 2147483647
                        minimum: 1
                        exclusiveMaximum: false
                        exclusiveMinimum: false
                      soTimeout:
                        description: With this option set to a non-zero timeout a read() call on the InputStream associated with this Socket will block for only this amount of time. If the timeout expires a java.net.SocketTimeoutException is raised though the Socket is still valid. The option must be enabled prior to entering the blocking operation to have effect. The timeout must be > 0. A timeout of zero is interpreted as an infinite timeout.
                        type: integer
                        multipleOf: 1
                        maximum: 2147483647
                        minimum: 1
                        exclusiveMaximum: false
                        exclusiveMinimum: false
                      maxRetryAttempts:
                        description: Maximum retry attempts in case of failure.
                        type: integer
                        multipleOf: 1
                        maximum: 2147483647
                        minimum: 1
                        exclusiveMaximum: false
                        exclusiveMinimum: false
                  inMemoryConfiguration:
                    type: object
                    description: Cache configuration.
                    properties:
                      defaultPutExpiration:
                        description: defaultPutExpiration timeout value.
                        type: integer
                        multipleOf: 1
                        maximum: 2147483647
                        minimum: 1
                        exclusiveMaximum: false
                        exclusiveMinimum: false
                  nativePersistenceConfiguration:
                    type: object
                    description: Cache configuration.
                    properties:
                      defaultPutExpiration:
                        description: defaultPutExpiration timeout value.
                        type: integer
                        multipleOf: 1
                        maximum: 2147483647
                        minimum: 1
                        default: 60
                        exclusiveMaximum: false
                        exclusiveMinimum: false
                      defaultCleanupBatchSize:
                        description: defaultCleanupBatchSize page size.
                        type: integer
                        multipleOf: 1
                        maximum: 2147483647
                        minimum: 25
                        default: 25
                        exclusiveMaximum: false
                        exclusiveMinimum: false
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          description: Internal Server Error
      security:
        - jans-auth: [https://jans.io/oauth/config/cache.write]
  /jans-config-api/api/v1/config/cache/memcached:
    get:
      summary: Returns Memcached cache configuration.
      description: Returns Memcached cache configuration.
      operationId: get-config-cache-memcached
      tags:
        - Cache Configuration – Memcached
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                description: Memcached cache configuration.
                required:
                  - servers
                  - maxOperationQueueLength
                  - bufferSize
                  - defaultPutExpiration
                  - memcachedConnectionFactoryType
                properties:
                  servers:
                    type: string
                    description: Server details separated by spaces.
                    format: url
                    minLength: 1
                  maxOperationQueueLength:
                    type: integer
                    description: Maximum operation Queue Length.
                    default: 99999999
                    multipleOf: 1
                    maximum: 2147483647
                    minimum: 1
                    exclusiveMaximum: false
                    exclusiveMinimum: false
                  bufferSize:
                    type: integer
                    description: Buffer Size.
                    default: 32768
                    multipleOf: 1
                    maximum: 2147483647
                    minimum: 1
                    exclusiveMaximum: false
                    exclusiveMinimum: false
                  defaultPutExpiration:
                    type: integer
                    description: Expiration timeout value.
                    default: 60
                    multipleOf: 1
                    maximum: 2147483647
                    minimum: 1
                    exclusiveMaximum: false
                    exclusiveMinimum: false
                  memcachedConnectionFactoryType:
                    type: string
                    description: The MemcachedConnectionFactoryType Type.
                    enum:
                      - DEFAULT
                      - BINARY
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          description: Internal Server Error
      security:
        - jans-auth: [https://jans.io/oauth/config/cache.readonly]
    put:
      summary: Updates Memcached cache configuration.
      description: Updates Memcached cache configuration.
      operationId: put-config-cache-memcached
      tags:
        - Cache Configuration – Memcached
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: Memcached cache configuration.
              required:
                - servers
                - maxOperationQueueLength
                - bufferSize
                - defaultPutExpiration
                - memcachedConnectionFactoryType
              properties:
                servers:
                  type: string
                  description: Server details separated by spaces.
                  format: url
                  minLength: 1
                maxOperationQueueLength:
                  type: integer
                  description: Maximum operation Queue Length.
                  default: 99999999
                  multipleOf: 1
                  maximum: 2147483647
                  minimum: 1
                  exclusiveMaximum: false
                  exclusiveMinimum: false
                bufferSize:
                  type: integer
                  description: Buffer Size.
                  default: 32768
                  multipleOf: 1
                  maximum: 2147483647
                  minimum: 1
                  exclusiveMaximum: false
                  exclusiveMinimum: false
                defaultPutExpiration:
                  type: integer
                  description: Expiration timeout value.
                  default: 60
                  multipleOf: 1
                  maximum: 2147483647
                  minimum: 1
                  exclusiveMaximum: false
                  exclusiveMinimum: false
                memcachedConnectionFactoryType:
                  type: string
                  description: The MemcachedConnectionFactoryType Type.
                  enum:
                  - DEFAULT
                  - BINARY
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                description: Memcached cache configuration.
                required:
                  - servers
                  - maxOperationQueueLength
                  - bufferSize
                  - defaultPutExpiration
                  - memcachedConnectionFactoryType
                properties:
                  servers:
                    type: string
                    description: Server details separated by spaces.
                    format: url
                    minLength: 1
                  maxOperationQueueLength:
                    type: integer
                    description: Maximum operation Queue Length.
                    default: 99999999
                    multipleOf: 1
                    maximum: 2147483647
                    minimum: 1
                    exclusiveMaximum: false
                    exclusiveMinimum: false
                  bufferSize:
                    type: integer
                    description: Buffer Size.
                    default: 32768
                    multipleOf: 1
                    maximum: 2147483647
                    minimum: 1
                    exclusiveMaximum: false
                    exclusiveMinimum: false
                  defaultPutExpiration:
                    type: integer
                    description: Expiration timeout value.
                    default: 60
                    multipleOf: 1
                    maximum: 2147483647
                    minimum: 1
                    exclusiveMaximum: false
                    exclusiveMinimum: false
                  memcachedConnectionFactoryType:
                    type: string
                    description: The MemcachedConnectionFactoryType Type.
                    enum:
                    - DEFAULT
                    - BINARY
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - jans-auth: [https://jans.io/oauth/config/cache.write]
    parameters: []
  /jans-config-api/api/v1/config/cache/redis:
    get:
      summary: Returns Redis cache configuration.
      description: Returns Redis cache configuration.
      operationId: get-config-cache-redis
      tags:
        - Cache Configuration – Redis
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                description: Cache Configuration
                properties:
                  redisProviderType:
                    description: Type of connection.
                    type: string
                    enum:
                      - STANDALONE
                      - CLUSTER
                      - SHARDED
                      - SENTINEL
                  servers:
                    description: 'server details separated by comma e.g. ''server1:8080server2:8081''.'
                    type: string
                    title: servers
                    format: url
                    minLength: 3
                  password:
                    description: Redis password.
                    type: string
                    minLength: 0
                  defaultPutExpiration:
                    description: defaultPutExpiration timeout value.
                    type: integer
                    multipleOf: 1
                    maximum: 2147483647
                    minimum: 1
                    exclusiveMaximum: false
                    exclusiveMinimum: false
                  sentinelMasterGroupName:
                    description: Sentinel Master Group Name (required if SENTINEL type of connection is selected).
                    type: string
                    minLength: 1
                  useSSL:
                    description: Enable SSL communication between Gluu Server and Redis cache.
                    type: boolean
                  sslTrustStoreFilePath:
                    description: Directory Path to Trust Store.
                    type: string
                    format: url
                    minLength: 1
                  maxIdleConnections:
                    description: The cap on the number of \idle\ instances in the pool. If max idle is set too low on heavily loaded systems it is possible you will see objects being destroyed and almost immediately new objects being created. This is a result of the active threads momentarily returning objects faster than they are requesting them causing the number of idle objects to rise above max idle. The best value for max idle for heavily loaded system will vary but the default is a good starting point.
                    type: integer
                    multipleOf: 1
                    maximum: 2147483647
                    minimum: 1
                    exclusiveMaximum: false
                    exclusiveMinimum: false
                  maxTotalConnections:
                    description: The number of maximum connection instances in the pool.
                    type: integer
                    multipleOf: 1
                    maximum: 2147483647
                    minimum: 1
                    exclusiveMaximum: false
                    exclusiveMinimum: false
                  connectionTimeout:
                    description: Connection time out.
                    type: integer
                    multipleOf: 1
                    maximum: 2147483647
                    minimum: 1
                    exclusiveMaximum: false
                    exclusiveMinimum: false
                  soTimeout:
                    description: With this option set to a non-zero timeout a read() call on the InputStream associated with this Socket will block for only this amount of time. If the timeout expires a java.net.SocketTimeoutException is raised though the Socket is still valid. The option must be enabled prior to entering the blocking operation to have effect. The timeout must be > 0. A timeout of zero is interpreted as an infinite timeout.
                    type: integer
                    multipleOf: 1
                    maximum: 2147483647
                    minimum: 1
                    exclusiveMaximum: false
                    exclusiveMinimum: false
                  maxRetryAttempts:
                    description: Maximum retry attempts in case of failure.
                    type: integer
                    multipleOf: 1
                    maximum: 2147483647
                    minimum: 1
                    exclusiveMaximum: false
                    exclusiveMinimum: false
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          description: Internal Server Error
      security:
        - jans-auth: [https://jans.io/oauth/config/cache.readonly]
    put:
      summary: Updates Redis cache configuration.
      description: Updates Redis cache configuration.
      operationId: put-config-cache-redis
      tags:
        - Cache Configuration – Redis
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: Cache Configuration
              properties:
                redisProviderType:
                  description: Type of connection.
                  type: string
                  enum:
                    - STANDALONE
                    - CLUSTER
                    - SHARDED
                    - SENTINEL
                servers:
                  description: 'server details separated by comma e.g. ''server1:8080server2:8081''.'
                  type: string
                  title: servers
                  format: url
                  minLength: 3
                password:
                  description: Redis password.
                  type: string
                  minLength: 0
                defaultPutExpiration:
                  description: defaultPutExpiration timeout value.
                  type: integer
                  multipleOf: 1
                  maximum: 2147483647
                  minimum: 1
                  exclusiveMaximum: false
                  exclusiveMinimum: false
                sentinelMasterGroupName:
                  description: Sentinel Master Group Name (required if SENTINEL type of connection is selected).
                  type: string
                  minLength: 1
                useSSL:
                  description: Enable SSL communication between Gluu Server and Redis cache.
                  type: boolean
                sslTrustStoreFilePath:
                  description: Directory Path to Trust Store.
                  type: string
                  format: url
                  minLength: 1
                maxIdleConnections:
                  description: The cap on the number of \idle\ instances in the pool. If max idle is set too low on heavily loaded systems it is possible you will see objects being destroyed and almost immediately new objects being created. This is a result of the active threads momentarily returning objects faster than they are requesting them causing the number of idle objects to rise above max idle. The best value for max idle for heavily loaded system will vary but the default is a good starting point.
                  type: integer
                  multipleOf: 1
                  maximum: 2147483647
                  minimum: 1
                  exclusiveMaximum: false
                  exclusiveMinimum: false
                maxTotalConnections:
                  description: The number of maximum connection instances in the pool.
                  type: integer
                  multipleOf: 1
                  maximum: 2147483647
                  minimum: 1
                  exclusiveMaximum: false
                  exclusiveMinimum: false
                connectionTimeout:
                  description: Connection time out.
                  type: integer
                  multipleOf: 1
                  maximum: 2147483647
                  minimum: 1
                  exclusiveMaximum: false
                  exclusiveMinimum: false
                soTimeout:
                  description: With this option set to a non-zero timeout a read() call on the InputStream associated with this Socket will block for only this amount of time. If the timeout expires a java.net.SocketTimeoutException is raised though the Socket is still valid. The option must be enabled prior to entering the blocking operation to have effect. The timeout must be > 0. A timeout of zero is interpreted as an infinite timeout.
                  type: integer
                  multipleOf: 1
                  maximum: 2147483647
                  minimum: 1
                  exclusiveMaximum: false
                  exclusiveMinimum: false
                maxRetryAttempts:
                  description: Maximum retry attempts in case of failure.
                  type: integer
                  multipleOf: 1
                  maximum: 2147483647
                  minimum: 1
                  exclusiveMaximum: false
                  exclusiveMinimum: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                description: Cache Configuration
                properties:
                  redisProviderType:
                    description: Type of connection.
                    type: string
                    enum:
                      - STANDALONE
                      - CLUSTER
                      - SHARDED
                      - SENTINEL
                  servers:
                    description: 'server details separated by comma e.g. ''server1:8080server2:8081''.'
                    type: string
                    title: servers
                    format: url
                    minLength: 3
                  password:
                    description: Redis password.
                    type: string
                    minLength: 0
                  defaultPutExpiration:
                    description: defaultPutExpiration timeout value.
                    type: integer
                    multipleOf: 1
                    maximum: 2147483647
                    minimum: 1
                    exclusiveMaximum: false
                    exclusiveMinimum: false
                  sentinelMasterGroupName:
                    description: Sentinel Master Group Name (required if SENTINEL type of connection is selected).
                    type: string
                    minLength: 1
                  useSSL:
                    description: Enable SSL communication between Gluu Server and Redis cache.
                    type: boolean
                  sslTrustStoreFilePath:
                    description: Directory Path to Trust Store.
                    type: string
                    format: url
                    minLength: 1
                  maxIdleConnections:
                    description: The cap on the number of \idle\ instances in the pool. If max idle is set too low on heavily loaded systems it is possible you will see objects being destroyed and almost immediately new objects being created. This is a result of the active threads momentarily returning objects faster than they are requesting them causing the number of idle objects to rise above max idle. The best value for max idle for heavily loaded system will vary but the default is a good starting point.
                    type: integer
                    multipleOf: 1
                    maximum: 2147483647
                    minimum: 1
                    exclusiveMaximum: false
                    exclusiveMinimum: false
                  maxTotalConnections:
                    description: The number of maximum connection instances in the pool.
                    type: integer
                    multipleOf: 1
                    maximum: 2147483647
                    minimum: 1
                    exclusiveMaximum: false
                    exclusiveMinimum: false
                  connectionTimeout:
                    description: Connection time out.
                    type: integer
                    multipleOf: 1
                    maximum: 2147483647
                    minimum: 1
                    exclusiveMaximum: false
                    exclusiveMinimum: false
                  soTimeout:
                    description: With this option set to a non-zero timeout a read() call on the InputStream associated with this Socket will block for only this amount of time. If the timeout expires a java.net.SocketTimeoutException is raised though the Socket is still valid. The option must be enabled prior to entering the blocking operation to have effect. The timeout must be > 0. A timeout of zero is interpreted as an infinite timeout.
                    type: integer
                    multipleOf: 1
                    maximum: 2147483647
                    minimum: 1
                    exclusiveMaximum: false
                    exclusiveMinimum: false
                  maxRetryAttempts:
                    description: Maximum retry attempts in case of failure.
                    type: integer
                    multipleOf: 1
                    maximum: 2147483647
                    minimum: 1
                    exclusiveMaximum: false
                    exclusiveMinimum: false
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          description: Internal Server Error
      security:
        - jans-auth: [https://jans.io/oauth/config/cache.write]
    parameters: []
  /jans-config-api/api/v1/config/cache/in-memory:
    get:
      summary: Returns in-Memory cache configuration.
      description: Returns in-Memory cache configuration.
      operationId: get-config-cache-in-memory
      tags:
        - Cache Configuration – in-Memory
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                description: Cache configuration.
                properties:
                  defaultPutExpiration:
                    description: defaultPutExpiration timeout value.
                    type: integer
                    multipleOf: 1
                    maximum: 2147483647
                    minimum: 1
                    exclusiveMaximum: false
                    exclusiveMinimum: false
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          description: Internal Server Error
      security:
        - jans-auth: [https://jans.io/oauth/config/cache.readonly]
    put:
      summary: Updates in-Memory cache configuration.
      description: Updates in-Memory cache configuration.
      operationId: put-config-cache-in-memory
      tags:
        - Cache Configuration – in-Memory
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: Cache configuration.
              properties:
                defaultPutExpiration:
                  description: defaultPutExpiration timeout value.
                  type: integer
                  multipleOf: 1
                  maximum: 2147483647
                  minimum: 1
                  exclusiveMaximum: false
                  exclusiveMinimum: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                description: Cache configuration.
                properties:
                  defaultPutExpiration:
                    description: defaultPutExpiration timeout value.
                    type: integer
                    multipleOf: 1
                    maximum: 2147483647
                    minimum: 1
                    exclusiveMaximum: false
                    exclusiveMinimum: false
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          description: Internal Server Error
      security:
        - jans-auth: [https://jans.io/oauth/config/cache.write]
    parameters: []
  /jans-config-api/api/v1/config/cache/native-persistence:
    get:
      summary: Returns native persistence cache configuration.
      description: Returns native persistence cache configuration.
      operationId: get-config-cache-native-persistence
      tags:
        - Cache Configuration – Native-Persistence
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                description: Cache configuration.
                properties:
                  defaultPutExpiration:
                    description: defaultPutExpiration timeout value.
                    type: integer
                    multipleOf: 1
                    maximum: 2147483647
                    minimum: 1
                    default: 60
                    exclusiveMaximum: false
                    exclusiveMinimum: false
                  defaultCleanupBatchSize:
                    description: defaultCleanupBatchSize page size.
                    type: integer
                    multipleOf: 1
                    maximum: 2147483647
                    minimum: 25
                    default: 25
                    exclusiveMaximum: false
                    exclusiveMinimum: false
                  deleteExpiredOnGetRequest:
                    type: boolean
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          description: Internal Server Error
      security:
        - jans-auth: [https://jans.io/oauth/config/cache.readonly]
    put:
      summary: Updates native persistence cache configuration.
      description: Updates native persistence cache configuration.
      operationId: put-config-cache-native-persistence
      tags:
        - Cache Configuration – Native-Persistence
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: Cache configuration.
              properties:
                defaultPutExpiration:
                  description: defaultPutExpiration timeout value.
                  type: integer
                  multipleOf: 1
                  maximum: 2147483647
                  minimum: 1
                  default: 60
                  exclusiveMaximum: false
                  exclusiveMinimum: false
                defaultCleanupBatchSize:
                  description: defaultCleanupBatchSize page size.
                  type: integer
                  multipleOf: 1
                  maximum: 2147483647
                  minimum: 25
                  default: 25
                  exclusiveMaximum: false
                  exclusiveMinimum: false
                deleteExpiredOnGetRequest:
                  type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                description: Cache configuration.
                properties:
                  defaultPutExpiration:
                    description: defaultPutExpiration timeout value.
                    type: integer
                    multipleOf: 1
                    maximum: 2147483647
                    minimum: 1
                    default: 60
                    exclusiveMaximum: false
                    exclusiveMinimum: false
                  defaultCleanupBatchSize:
                    description: defaultCleanupBatchSize page size.
                    type: integer
                    multipleOf: 1
                    maximum: 2147483647
                    minimum: 25
                    default: 25
                    exclusiveMaximum: false
                    exclusiveMinimum: false
                  deleteExpiredOnGetRequest:
                    type: boolean
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          description: Internal Server Error
      security:
        - jans-auth: [https://jans.io/oauth/config/cache.write]
    parameters: []
  /jans-config-api/api/v1/config/smtp:
    get:
      summary: Returns SMTP server configuration.
      description: Returns SMTP server configuration.
      operationId: get-config-smtp
      tags:
        - Configuration – SMTP
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                description: SMTP configuration.
                properties:
                  host:
                    description: Hostname of the SMTP server.
                    type: string
                    format: url
                  port:
                    description: Port number of the SMTP server.
                    type: integer
                    multipleOf: 1
                  requires-ssl:
                    description: 'Boolean value with default value false. If true, SSL will be enabled.'
                    type: boolean
                  trust-host:
                    type: boolean
                    description: Boolean value with default value false.
                  from-name:
                    description: Name of the sender.
                    type: string
                  from-email-address:
                    description: Email Address of the Sender.
                    type: string
                  requires-authentication:
                    description: Boolean value with default value false. It true it will enable sender authentication.
                    type: boolean
                  user-name:
                    description: Username of the SMTP.
                    type: string
                  password:
                    description: Password for the SMTP.
                    type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          description: Internal Server Error
      security:
        - jans-auth: [https://jans.io/oauth/config/smtp.readonly]
    post:
      summary: Adds SMTP server configuration.
      description: Adds SMTP server configuration.
      operationId: post-config-smtp
      tags:
        - Configuration – SMTP
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: SMTP configuration.
              properties:
                host:
                  description: Hostname of the SMTP server.
                  type: string
                  format: url
                port:
                  description: Port number of the SMTP server.
                  type: integer
                  multipleOf: 1
                requires-ssl:
                  description: 'Boolean value with default value false. If true, SSL will be enabled.'
                  type: boolean
                trust-host:
                  type: boolean
                  description: Boolean value with default value false.
                from-name:
                  description: Name of the sender.
                  type: string
                from-email-address:
                  description: Email Address of the Sender.
                  type: string
                requires-authentication:
                  description: Boolean value with default value false. It true it will enable sender authentication.
                  type: boolean
                user-name:
                  description: Username of the SMTP.
                  type: string
                password:
                  description: Password for the SMTP.
                  type: string
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                description: SMTP configuration.
                properties:
                  host:
                    description: Hostname of the SMTP server.
                    type: string
                    format: url
                  port:
                    description: Port number of the SMTP server.
                    type: integer
                    multipleOf: 1
                  requires-ssl:
                    description: 'Boolean value with default value false. If true, SSL will be enabled.'
                    type: boolean
                  trust-host:
                    type: boolean
                    description: Boolean value with default value false.
                  from-name:
                    description: Name of the sender.
                    type: string
                  from-email-address:
                    description: Email Address of the Sender.
                    type: string
                  requires-authentication:
                    description: Boolean value with default value false. It true it will enable sender authentication.
                    type: boolean
                  user-name:
                    description: Username of the SMTP.
                    type: string
                  password:
                    description: Password for the SMTP.
                    type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          description: Internal Server Error
      security:
        - jans-auth: [https://jans.io/oauth/config/smtp.write]
    put:
      summary: Updates SMTP server configuration.
      description: Updates SMTP server configuration.
      operationId: put-config-smtp
      tags:
        - Configuration – SMTP
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: SMTP configuration.
              properties:
                host:
                  description: Hostname of the SMTP server.
                  type: string
                  format: url
                port:
                  description: Port number of the SMTP server.
                  type: integer
                  multipleOf: 1
                requires-ssl:
                  description: 'Boolean value with default value false. If true, SSL will be enabled.'
                  type: boolean
                trust-host:
                  type: boolean
                  description: Boolean value with default value false.
                from-name:
                  description: Name of the sender.
                  type: string
                from-email-address:
                  description: Email Address of the Sender.
                  type: string
                requires-authentication:
                  description: Boolean value with default value false. It true it will enable sender authentication.
                  type: boolean
                user-name:
                  description: Username of the SMTP.
                  type: string
                password:
                  description: Password for the SMTP.
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                description: SMTP configuration.
                properties:
                  host:
                    description: Hostname of the SMTP server.
                    type: string
                    format: url
                  port:
                    description: Port number of the SMTP server.
                    type: integer
                    multipleOf: 1
                  requires-ssl:
                    description: 'Boolean value with default value false. If true, SSL will be enabled.'
                    type: boolean
                  trust-host:
                    type: boolean
                    description: Boolean value with default value false.
                  from-name:
                    description: Name of the sender.
                    type: string
                  from-email-address:
                    description: Email Address of the Sender.
                    type: string
                  requires-authentication:
                    description: Boolean value with default value false. It true it will enable sender authentication.
                    type: boolean
                  user-name:
                    description: Username of the SMTP.
                    type: string
                  password:
                    description: Password for the SMTP.
                    type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          description: Internal Server Error
      security:
        - jans-auth: [https://jans.io/oauth/config/smtp.write]
    delete:
      summary: Deletes SMTP server configuration.
      description: Deletes SMTP server configuration.
      operationId: delete-config-smtp
      tags:
        - Configuration – SMTP
      responses:
        '204':
          description: No Content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          description: Internal Server Error
      security:
        - jans-auth: [https://jans.io/oauth/config/smtp.write]
    parameters: []
  /jans-config-api/api/v1/config/smtp/test:
    get:
      summary: Test SMTP server configuration.
      description: Test SMTP server configuration.
      operationId: test-config-smtp
      tags:
        - Configuration – SMTP
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                description: SMTP configuration test status.
                properties:
                  service:
                    description: Service name.
                    type: string
                    example: SMTP SERVER CONFIGURATION TEST
                  status:
                    description: Status of SMTP server connection test.
                    type: string
                    enum: 
                    - OKAY
                    - FAILED
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          description: Internal Server Error
      security:
        - jans-auth: [https://jans.io/oauth/config/smtp.readonly]
  /jans-config-api/api/v1/logging:
    get:
      tags:
        - Configuration – Logging
      summary: Returns Jans Authorization Server logging settings.
      description: Returns Jans Authorization Server logging settings.
      operationId: get-config-logging
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                items:
                  type: object
                  description: Log configuration.
                  properties:
                    loggingLevel:
                      type: string
                      description: Logging level for Jans Authorization Server logger.
                      enum:
                        - TRACE
                        - DEBUG
                        - INFO
                        - WARN
                        - ERROR
                        - FATAL
                        - 'OFF'
                    loggingLayout:
                      type: string
                      description: Logging layout used for Jans Authorization Server loggers.
                      enum:
                        - text
                        - json
                    httpLoggingEnabled:
                      description: To enable http request/response logging.
                      type: boolean
                    disableJdkLogger:
                      description: To enable/disable Jdk logging.
                      type: boolean
                    enabledOAuthAuditLogging:
                      description: To enable/disable OAuth audit logging.
                      type: boolean
                    externalLoggerConfiguration:
                      description: Path to external log4j2 configuration file.
                      type: string
                    httpLoggingExludePaths:
                      description: List of paths to exclude from logger.
                      type: array
                      items:
                        type: string
                      example:
                        - /auth/img
                        - /auth/stylesheet                 
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          description: Internal Server Error
      security:
        - jans-auth: [https://jans.io/oauth/config/logging.readonly]
    put:
      tags:
        - Configuration – Logging
      summary: Updates Jans Authorization Server logging settings.
      description: Updates Jans Authorization Server logging settings.
      operationId: put-config-logging
      requestBody:
        content:
          application/json:
            schema:
              items:
                type: object
                description: Log configuration.
                properties:
                  loggingLevel:
                    type: string
                    description: Logging level for Jans Authorization Server logger.
                    enum:
                      - TRACE
                      - DEBUG
                      - INFO
                      - WARN
                      - ERROR
                      - FATAL
                      - 'OFF'
                  loggingLayout:
                    type: string
                    description: Logging layout used for Jans Authorization Server loggers.
                    enum:
                      - text
                      - json
                  httpLoggingEnabled:
                    description: To enable http request/response logging.
                    type: boolean
                  disableJdkLogger:
                    description: To enable/disable Jdk logging.
                    type: boolean
                  enabledOAuthAuditLogging:
                    description: To enable/disable OAuth audit logging.
                    type: boolean
                  externalLoggerConfiguration:
                    description: Path to external log4j2 configuration file.
                    type: string
                  httpLoggingExludePaths:
                    description: List of paths to exclude from logger.
                    type: array
                    items:
                      type: string
                    example:
                      - /auth/img
                      - /auth/stylesheet
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          description: Internal Server Error
      security:
        - jans-auth: [https://jans.io/oauth/config/logging.write]
    parameters: []
  /jans-config-api/api/v1/config/jwks:
    get:
      tags:
        - Configuration – JWK - JSON Web Key (JWK)
      summary: Gets list of JSON Web Key (JWK) used by server.
      description: 'Gets list of JSON Web Key (JWK) used by server. JWK is a JSON data structure that represents a set of public keys as a JSON object [RFC4627].'
      operationId: get-config-jwks
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: WebKeysConfiguration
                required:
                  - keys
                type: object
                description: 'JSON Web Key Set (JWKS) - A JSON object that represents a set of JWKs. The JSON object MUST have a keys member, which is an array of JWKs.'
                properties:
                  keys:
                    type: array
                    description: 'List of JSON Web Key (JWK) - A JSON object that represents a cryptographic key. The members of the object represent properties of the key, including its value.'
                    items:
                      $ref: '#/components/schemas/JsonWebKey'
                  jwksAlgorithmsSupported:
                    type: array
                    description: A list of algorithms that will be used in JWKS endpoint.
                    minItems: 1
                    uniqueItems: true
                    items:
                      type: string
                    enum:
                      - RS256
                      - RS384
                      - RS512
                      - ES256
                      - ES384
                      - ES512
                      - PS256
                      - PS384
                      - PS512
                      - RSA1_5
                      - RSA-OAEP
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - jans-auth: [https://jans.io/oauth/config/jwks.readonly]
    put:
      tags:
        - Configuration – JWK - JSON Web Key (JWK)
      summary: Puts/replaces JWKS
      description: Puts/replaces JSON Web Keys (JWKS).
      operationId: put-config-jwks
      requestBody:
        content:
          application/json:
            schema:
              title: WebKeysConfiguration
              required:
                - keys
              type: object
              description: 'JSON Web Key Set (JWKS) - A JSON object that represents a set of JWKs. The JSON object MUST have a keys member, which is an array of JWKs.'
              properties:
                keys:
                  type: array
                  description: 'List of JSON Web Key (JWK) - A JSON object that represents a cryptographic key. The members of the object represent properties of the key, including its value.'
                  items:
                    $ref: '#/components/schemas/JsonWebKey'
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - jans-auth: [https://jans.io/oauth/config/jwks.write]
    patch:
      tags:
        - Configuration – JWK - JSON Web Key (JWK)
      summary: Patch JWKS
      description: Patch JSON Web Keys (JWKS).
      operationId: patch-config-jwks
      requestBody:
        content:
          application/json-patch+json:
            schema:
              type: string
              $ref: '#/components/schemas/PatchRequest'
              description: String representing patch-document.
              example: '[{"op": "add","path": "/keys/1", "value": { "kty": "RSA", "e": "AQAB","use": "sig","crv": "","kid": "dd570bfb-276a-44aa-a97d-667b57587108_sig_rs256","x5c": ["MIIDBDCC..."],"exp": 1599751946863,"alg": "RS256","n": "zj1NE.."}}]'
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - jans-auth: [https://jans.io/oauth/config/jwks.write]
  /jans-config-api/api/v1/openid/clients:
    get:
      tags:
        - OAuth - OpenID Connect - Clients
      summary: Gets list of OpenID Connect clients
      description: Gets list of OpenID Connect clients
      operationId: get-oauth-openid-clients
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: OpenID Clients.
                description: List of OpenID clients.
                type: array
                items:
                  $ref: '#/components/schemas/Client'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          description: Internal Server Error
      security:
        - jans-auth: [https://jans.io/oauth/config/openid/clients.readonly]
      parameters:
        - schema:
            type: integer
            default: 50
          in: query
          name: limit
          description: Search size - max size of the results to return.
        - schema:
            type: string
          in: query
          name: pattern
          description: Search pattern.
    post:
      tags:
        - OAuth - OpenID Connect - Clients
      summary: Create new OpenId connect client
      description: Create new OpenId connect client
      operationId: post-oauth-openid-clients
      requestBody:
        content:
          application/json:
            schema:
              title: OpenID Connect Client Details.
              description: OpenID Connect Client Details.
              type: object
              items:
                $ref: '#/components/schemas/Client'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                title: OpenID Connect Client Details.
                description: OpenID Connect Client Details.
                type: object
                items:
                  $ref: '#/components/schemas/Client'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          description: Internal Server Error
      security:
        - jans-auth: [https://jans.io/oauth/config/openid/clients.write]
    put:
      tags:
        - OAuth - OpenID Connect - Clients
      summary: Update OpenId Connect client.
      description: Update OpenId Connect client.
      operationId: put-oauth-openid-clients
      requestBody:
        content:
          application/json:
            schema:
              title: OpenID Connect Client Details.
              description: OpenID Connect Client Details.
              type: object
              items:
                $ref: '#/components/schemas/Client'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: OpenID Connect Client Details.
                description: OpenID Connect Client Details.
                type: object
                items:
                  $ref: '#/components/schemas/Client'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          description: Internal Server Error
      security:
        - jans-auth: [https://jans.io/oauth/config/openid/clients.write]
  '/jans-config-api/api/v1/openid/clients/{inum}':
    parameters:
      - schema:
          type: string
        name: inum
        in: path
        description: Client identifier
        required: true
    get:
      tags:
        - OAuth - OpenID Connect - Clients
      summary: Get OpenId Connect Client by Inum
      description: Get OpenId Connect Client by Inum.
      operationId: get-oauth-openid-clients-by-inum
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                description: Client Details.
                items:
                  $ref: '#/components/schemas/Client'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          description: Internal Server Error
      security:
        - jans-auth: [https://jans.io/oauth/config/openid/clients.readonly]
    delete:
      tags:
        - OAuth - OpenID Connect - Clients
      summary: Delete OpenId Connect client.
      description: Delete OpenId Connect client.
      operationId: delete-oauth-openid-clients-by-inum
      responses:
        '204':
          description: No Content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          description: Internal Server Error
      security:
        - jans-auth: [https://jans.io/oauth/config/openid/clients.write]
    patch:
      tags:
        - OAuth - OpenID Connect - Clients
      summary: Update modified properties of OpenId Connect client by Inum.
      description: Update modified properties of OpenId Connect client by Inum.
      operationId: patch-oauth-openid-clients-by-inum
      requestBody:
        content:
          application/json:
            schema:
              type: string 
              $ref: '#/components/schemas/PatchRequest'
              description: String representing patch-document.
              example: '[ {op:replace, path: backchannel_authentication_request_signing_alg, value: false } ]'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                description: Client Details.
                items:
                  $ref: '#/components/schemas/Client'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          description: Internal Server Error
      security:
        - jans-auth: [https://jans.io/oauth/config/openid/clients.write]
  /jans-config-api/api/v1/openid/sectoridentifiers:
    get:
      tags:
        - OAuth - OpenID Connect - Sector Identifiers
      summary: Gets list of OpenID Connect Sectors.
      description: Gets list of OpenID Connect Sectors.
      operationId: get-oauth-openid-sectors
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: SectorIdentifier list.
                description: List of SectorIdentifier.
                items:
                 $ref: '#/components/schemas/SectorIdentifier'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          description: Internal Server Error
      security:
        - jans-auth: [https://jans.io/oauth/config/openid/sectoridentifiers.readonly]
    post:
      tags:
        - OAuth - OpenID Connect - Sector Identifiers
      summary: Create new OpenID Connect Sector.
      description: Create new OpenID Connect Sector.
      operationId: post-oauth-openid-sectors
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SectorIdentifier'
      responses:
        '201':
          description: Created
          content:
           application/json:
            schema:
              $ref: '#/components/schemas/SectorIdentifier'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          description: Internal Server Error
      security:
        - jans-auth: [https://jans.io/oauth/config/openid/sectoridentifiers.write]
    put:
      tags:
        - OAuth - OpenID Connect - Sector Identifiers
      summary: Update OpenId Connect Sector.
      description: Update OpenId Connect Sector.
      operationId: put-oauth-openid-sectors
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SectorIdentifier'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SectorIdentifier'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          description: Internal Server Error
      security:
        - jans-auth: [https://jans.io/oauth/config/openid/sectoridentifiers.write]
  /jans-config-api/api/v1/openid/sectoridentifiers/{inum}:
    parameters:
      - name: inum
        in: path
        required: true
        description: Scope ID.
        schema:
          type: string
    get:
      tags:
        - OAuth - OpenID Connect - Sector Identifiers
      summary: Get OpenID Connect Sector by Inum.
      description: Get OpenID Connect Sector by Inum.
      operationId: get-oauth-openid-sectors-by-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SectorIdentifier'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          description: Internal Server Error
      security:
        - jans-auth: [https://jans.io/oauth/config/openid/sectoridentifiers.readonly]
    delete:
      tags:
        - OAuth - OpenID Connect - Sector Identifiers
      summary: Delete OpenID Connect Sector.
      description: Delete OpenID Connect Sector.
      operationId: delete-oauth-openid-sectors-by-id
      responses:
        '204':
          description: No Content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          description: Internal Server Error
      security:
        - jans-auth: [https://jans.io/oauth/config/openid/sectoridentifiers.write]
    patch:
      tags:
        - OAuth - OpenID Connect - Sector Identifiers
      summary: Partially update OpenId Connect Sector by Inum.
      description: Partially update OpenId Connect Sector by Inum.
      operationId: patch-oauth-openid-sectors-by-id
      requestBody:
        content:
          application/json-patch+json:
            schema:
              type: array
              items: 
                $ref: '#/components/schemas/PatchRequest'
                description: String representing patch-document.ss
                example: '[ {op:replace, path: redirect_uris/2, value: https://client.example.org/cb/new } ]'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SectorIdentifier'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          description: Internal Server Error
      security:
        - jans-auth: [https://jans.io/oauth/config/openid/sectoridentifiers.write]
  /jans-config-api/api/v1/uma/resources:
    get:
      tags:
        - OAuth - UMA Resources
      summary: Gets list of UMA resources.
      description: Gets list of UMA resources.
      operationId: get-oauth-uma-resources
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: UMA Resource list.
                description: List of UMA Resource.
                items:
                 $ref: '#/components/schemas/UmaResource'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          description: Internal Server Error
      security:
        - jans-auth: [https://jans.io/oauth/config/uma/resources.readonly]
      parameters:
        - schema:
            type: integer
            default: 50
          in: query
          name: limit
          description: Search size - max size of the results to return.
        - schema:
            type: string
          in: query
          name: pattern
          description: Search pattern.
    post:
      tags:
        - OAuth - UMA Resources
      summary: Creates an UMA resource.
      description: Creates an UMA resource.
      operationId: post-oauth-uma-resources
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UmaResource'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                title: UMAResource
                $ref: '#/components/schemas/UmaResource'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          description: Internal Server Error
      security:
        - jans-auth: [https://jans.io/oauth/config/uma/resources.write]
    put:
      tags:
        - OAuth - UMA Resources
      summary: Updates an UMA resource.
      description: Updates an UMA resource.
      operationId: put-oauth-uma-resources
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UmaResource'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UmaResource'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          description: Internal Server Error
      security:
        - jans-auth: [https://jans.io/oauth/config/uma/resources.write]
  '/jans-config-api/api/v1/uma/resources/{id}':
    parameters:
      - name: id
        in: path
        required: true
        description: Resource description ID.
        schema:
          type: string
    get:
      tags:
        - OAuth - UMA Resources
      summary: Gets an UMA resource by ID.
      description: Gets an UMA resource by ID.  
      operationId: get-oauth-uma-resources-by-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: UMAResource
                $ref: '#/components/schemas/UmaResource'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          description: Internal Server Error
      security:
        - jans-auth: [https://jans.io/oauth/config/uma/resources.readonly]
    delete:
      tags:
        - OAuth - UMA Resources
      summary: Deletes an UMA resource.
      description: Deletes an UMA resource.
      operationId: delete-oauth-uma-resources-by-id
      responses:
        '204':
          description: No Content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          description: Internal Server Error
      security:
        - jans-auth: [https://jans.io/oauth/config/uma/resources.write]
    patch:
      tags:
        - OAuth - UMA Resources
      summary: Partially updates an UMA resource by Inum.
      description: Partially updates an UMA resource by Inum.
      operationId: patch-oauth-uma-resources-by-id
      requestBody:
        content:
          application/json-patch+json:
            schema:
              type: array
              items: 
                $ref: '#/components/schemas/PatchRequest'
                description: String representing patch-document.
                example: '[ {op:replace, path: clients, value: [\"client_1\",\"client_2\"] },{op:add, path: clients/2, value: \"client_3\" } ]'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: UMAResource
                $ref: '#/components/schemas/UmaResource'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          description: Internal Server Error
      security:
        - jans-auth: [https://jans.io/oauth/config/uma/resources.write]
  /jans-config-api/api/v1/scopes:
    get:
      tags:
        - OAuth - Scopes
      summary: Gets list of Scopes.
      description: Gets list of Scopes. Optionally type to filter the scope, max-size of the result and pattern can be provided.
      operationId: get-oauth-scopes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: Scope description list.
                description: List of scope description.
                items:
                  $ref: '#/components/schemas/Scope'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          description: Internal Server Error
      security:
        - jans-auth: [https://jans.io/oauth/config/scopes.readonly]
      parameters:
        - schema:
            type: string
          in: query
          name: type
          description: Scope type.
        - schema:
            type: integer
            default: 50
          in: query
          name: limit
          description: Search size - max size of the results to return.
        - schema:
            type: string
          in: query
          name: pattern
          description: Search pattern.
    post:
      tags:
        - OAuth - Scopes
      summary: Create Scope.
      description: Create Scope.
      operationId: post-oauth-scopes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Scope'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Scope'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          description: Internal Server Error
      security:
        - jans-auth: [https://jans.io/oauth/config/scopes.write]
    put:
      tags:
        - OAuth - Scopes
      summary: Updates existing Scope.
      description: Updates existing Scope.
      operationId: put-oauth-scopes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Scope'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Scope'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          description: Internal Server Error
      security:
        - jans-auth: [https://jans.io/oauth/config/scopes.write]
    parameters: []
  /jans-config-api/api/v1/scopes/{inum}:
    parameters:
      - schema:
          type: string
        name: inum
        in: path
        required: true
    get:
      tags:
        - OAuth - Scopes
      summary: Get Scope by Inum
      description: Get Scope by Inum
      operationId: get-oauth-scopes-by-inum
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Scope'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          description: Internal Server Error
      security:
        - jans-auth: ['https://jans.io/oauth/config/scopes.readonly']
    delete:
      tags:
        - OAuth - Scopes
      summary: Delete Scope.
      description: Delete Scope.
      operationId: delete-oauth-scopes-by-id
      responses:
        '204':
          description: No Content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          description: Internal Server Error
      security:
        - jans-auth: [https://jans.io/oauth/config/scopes.write]
    patch:
      tags:
        - OAuth - Scopes
      summary: Update modified attributes of existing Scope by Inum.
      description: Update modified attributes of existing Scope by Inum.
      operationId: patch-oauth-scopes-by-id
      requestBody:
        content:
          application/json-patch+json:
            schema:
              type: array
              items: 
                $ref: '#/components/schemas/PatchRequest'
                description: String representing patch-document.
                example: '[ {op:replace, path: clients, value: [\"client_1\",\"client_2\"] },{op:add, path: clients/2, value: \"client_3\" } ]'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Scope'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          description: Internal Server Error
      security:
        - jans-auth: [https://jans.io/oauth/config/scopes.write]
components:
  securitySchemes:
    jans-auth:
      type: oauth2
      description: Authorization
      flows:
        clientCredentials:
          tokenUrl: 'https://{op-hostname}/.../token'
          scopes: 
            https://jans.io/oauth/jans-auth-server/config/properties.readonly: View Auth Server properties related information
            https://jans.io/oauth/jans-auth-server/config/properties.write: View and manage Auth Server properties related information
            https://jans.io/oauth/config/fido2.readonly: View FIDO2 related information
            https://jans.io/oauth/config/fido2.write: View and manage FIDO2 related information
            https://jans.io/oauth/config/attributes.readonly: View attribute related information
            https://jans.io/oauth/config/attributes.write: View and manage attribute related information
            https://jans.io/oauth/config/acrs.readonly: View ACRS related information
            https://jans.io/oauth/config/acrs.write: View and manage ACRS related information
            https://jans.io/oauth/config/database/ldap.readonly: View LDAP database related information
            https://jans.io/oauth/config/database/ldap.write: View and manage LDAP database related information
            https://jans.io/oauth/config/database/couchbase.readonly: View Couchbase database information
            https://jans.io/oauth/config/database/couchbase.write: View and manage Couchbase database related information
            https://jans.io/oauth/config/scripts.readonly: View cache scripts information
            https://jans.io/oauth/config/scripts.write: View and manage scripts related information
            https://jans.io/oauth/config/cache.readonly: View cache related information
            https://jans.io/oauth/config/cache.write: View and manage cache related information
            https://jans.io/oauth/config/smtp.readonly: View SMTP related information	
            https://jans.io/oauth/config/smtp.write: View and manage SMTP related information
            https://jans.io/oauth/config/logging.readonly: View logging related information	
            https://jans.io/oauth/config/logging.write: View and manage logging related information
            https://jans.io/oauth/config/jwks.readonly: View JWKS related information	
            https://jans.io/oauth/config/jwks.write: View and manage JWKS related information	
            https://jans.io/oauth/config/openid/clients.readonly: View clients related information
            https://jans.io/oauth/config/openid/clients.write: View and manage clients related information	
            https://jans.io/oauth/config/openid/sectoridentifiers.readonly: View sector related information
            https://jans.io/oauth/config/openid/sectoridentifiers.write: View and manage sector related information		
            https://jans.io/oauth/config/scopes.readonly: View scope related information
            https://jans.io/oauth/config/scopes.write: View and manage scope related information
            https://jans.io/oauth/config/uma/resources.readonly: View UMA Resource related information
            https://jans.io/oauth/config/uma/resources.write: View and manage UMA Resource related information
  responses:
    Found:
      description: Resource Found.
      content: {}
    InvalidRequest:
      description: Invalid parameters are provided to endpoint.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Unauthorized:
      description: Access token is missing or invalid.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    AccessDenied:
      description: Invalid details provided hence access denied.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    NotFound:
      description: Resource Not Found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    NotAcceptable:
      description: Request Not Acceptable.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    InternalServerError:
      description: Internal error occurred. Please check log file for details.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
  schemas:
    ErrorResponse:
      required:
        - error_code
        - error_description
      type: object
      properties:
        error_code:
          type: string
        error_description:
          type: string
        details:
          type: string
    CustomScript:
      required:
        - id
        - name
      type: object
      properties:
        dn:
          type: string
        inum:
          type: string
        name:
          type: string
          pattern: '^[a-zA-Z0-9_\\-\\:\\/\\.]+$'
          minLength: 1
          maxLength: 60
          description: 'Name should contain only letters, digits and underscores.'
        aliases:
          type: array
          items:
            type: string
        description:
          type: string
        script:
          type: string
          description: Actual script.
        scriptType:
          type: string
          enum:
            - person_authentication
            - introspection
            - resource_owner_password_credentials
            - application_session
            - cache_refresh
            - update_user
            - user_registration
            - client_registration
            - id_generator
            - uma_rpt_policy
            - uma_rpt_claims
            - uma_claims_gathering
            - consent_gathering
            - dynamic_scope
            - spontaneous_scope
            - end_session
            - post_authn
            - scim
            - ciba_end_user_notification
            - persistence_extension
            - idp
        programmingLanguage:
          type: string
          enum:
            - python
            - javascript
          description: Specifies programming language of the custom script.
        moduleProperties:
          type: array
          items:
            type: object
            properties:
              value1:
                type: string
              value2:
                type: string
              description:
                type: string
        configurationProperties:
          type: array
          items:
            type: object
            properties:
              value1:
                type: string
              value2:
                type: string
              description:
                type: string
              hide:
                type: boolean
        level:
          type: integer
        revision:
          type: integer
          format: int64
        enabled:
          type: boolean
        scriptError:
          type: object
          properties:
            raisedAt:
              type: string
              format: date
            stackTrace:
              type: string
        modified:
          type: boolean
        internal:
          type: boolean
    LdapConfiguration:
      type: object
      required:
        - configId
        - bindDN
        - maxConnections
        - primaryKey
        - localPrimaryKey
        - servers
        - baseDNs
        - useSSL
      properties:
        configId:
          type: string
          description: Unique identifier - Name
          example: auth_ldap_server
        bindDN:
          type: string
          description: User Distingusihed Name for binding.
        maxConnections:
          type: integer
          description: Total number of simultaneous connections allowed.
          format: int32
          default: 2
        primaryKey:
          type: string
          description: Used to search and bind operations in configured LDAP server.
          example: 'SAMAccountName,uid, email'
        localPrimaryKey:
          type: string
          description: Used to search local user entry in Gluu Server’s internal LDAP directory.
          example: 'uid, email'
        servers:
          type: array
          description: List of LDAP authentication servers.
          items:
            type: string
            description: Unique name of the authentication server and port number.
            example: 'authserver.org:63'
        baseDNs:
          type: array
          description: list of LDAP base Distingusihed Name
          items:
            type: string
        useSSL:
          type: boolean
        bindPassword:
          type: string
          description: User password for binding.
        useAnonymousBind:
          type: boolean
          description: Boolean value used to indicate if the LDAP Server will allow anonymous bind request.
        enabled:
          type: boolean
        version:
          type: integer
    CouchbaseConfiguration:
      type: object
      required:
        - configId
        - userName
        - userPassword
        - servers
        - defaultBucket
        - buckets
      properties:
        configId:
          type: string
          description: Unique identifier
        userName:
          type: string
          description: Couchbase server user.
        userPassword:
          type: string
          description: Encoded Couchbase server user password.
        servers:
          type: array
          items:
            type: string
          description: Couchbase server host and port.
        defaultBucket:
          type: string
          description: Main bucket that application should use if other mapping rules were not applied.
        buckets:
          type: array
          items:
            type: string
          description: List of buckets defining mapping rules.
        passwordEncryptionMethod:
          type: string
          enum:
            - SHA
            - SSHA
            - SHA-256
            - SSHA-256
            - SHA-384
            - SSHA-384
            - SHA-512
            - SSHA-512
            - MD5
            - SMD5
            - CRYPT
            - CRYPT-MD5
            - CRYPT-SHA-256
            - CRYPT-SHA-512
            - CRYPT-BCRYPT
            - CRYPT-BCRYPT
            - PKCS5S2
        operationTracingEnabled:
          type: boolean
          default: false
        mutationTokensEnabled:
          type: boolean
          description: 'If mutation tokens are enabled, they can be used for advanced durability requirements, as well as optimized RYOW consistency.'
          default: false
        connectTimeout:
          type: integer
          format: int32
        computationPoolSize:
          type: integer
          format: int32
          description: 'Sets the pool size (number of threads to use) for all non-blocking operations, default value is the number of CPUs.'
        useSSL:
          type: boolean
        sslTrustStoreFile:
          type: string
          description: The path to the trust store file to use. It contains the trusted certificates.
        sslTrustStorePin:
          type: string
          description: The PIN to use to access the contents of the trust store.
        sslTrustStoreFormat:
          type: string
          description: The format to use for the trust store.
        binaryAttributes:
          type: array
          items:
            type: string
        certificateAttributes:
          type: array
          items:
            type: string
    JsonWebKey:
      required:
        - alg
        - exp
        - key_ops
        - kid
        - kty
        - use
        - x5c
      type: object
      properties:
        kid:
          type: string
        kty:
          type: string
        use:
          type: string
        alg:
          type: string
        crv:
          type: string
        exp:
          type: integer
          format: int64
        x5c:
          type: array
          items:
            type: string
        'n':
          type: string
        e:
          type: string
        x:
          type: string
        'y':
          type: string
 
    AppConfiguration:
      title: AppConfiguration
      description: App configuration properties.
      properties:
        sessionAsJwt:
          type: boolean
          description: Boolean value true saves session data as a JWT.
        issuer:
          type: string
          description: URL using the https scheme that OP asserts as Issuer identifier.
          example: 'https://server.example.com/'
        baseEndpoint:
          type: string
          description: The base URL for endpoints.
          example: 'https://server.example.com/restv1'
        authorizationEndpoint:
          type: string
          description: The authorization endpoint URL.
          example: 'https://server.example.com/restv1/authorize'
        tokenEndpoint:
          type: string
          description: The token endpoint URL.
          example: 'https://server.example.com/restv1/token'
        tokenRevocationEndpoint:
          type: string
          description: The URL for the access_token or refresh_token revocation endpoint.
          example: 'https://server.example.com/restv1/revoke'
        userInfoEndpoint:
          type: string
          description: The User Info endpoint URL.
          example: 'https://server.example.com/restv1/userinfo'
        clientInfoEndpoint:
          type: string
          description: The Client Info endpoint URL.
          example: 'https://server.example.com/restv1/clientinfo'
        checkSessionIFrame:
          type: string
          description: URL for an OP IFrame that supports cross-origin communications for session state information with the RP Client using the HTML5 postMessage API.
          example: 'https://server.example.com/opiframe.htm'
        endSessionEndpoint:
          type: string
          description: URL at the OP to which an RP can perform a redirect to request that the end user be logged out at the OP.
          example: 'https://server.example.com/restv1/end_session'
        jwksUri:
          type: string
          description: URL of the OP's JSON Web Key Set (JWK) document. This contains the signing key(s) the RP uses to validate signatures from the OP.
          example: 'https://server.example.com/restv1/jwks'
        registrationEndpoint:
          type: string
          description: URL of the Registration Endpoint.
          example: 'https://server.example.com/restv1/register'
        openIdDiscoveryEndpoint:
          type: string
          description: URL for the Discovery Endpoint.
          example: 'https://server.example.com/.well-known/webfinger'
        openIdConfigurationEndpoint:
          type: string
          description: URL for the Open ID Connect Configuration Endpoint.
          example: 'https://server.example.com/.well-known/openid-configuration'
        idGenerationEndpoint:
          type: string
          description: URL for the ID Generation Endpoint.
          example: 'https://server.example.com/restv1/id'
        introspectionEndpoint:
          type: string
          description: URL for the Introspection Endpoint.
          example: 'https://server.example.com/restv1/introspection'
        introspectionAccessTokenMustHaveUmaProtectionScope:
          type: boolean
          description: Reject introspection requests if access_token in Authorization header does not have uma_protection scope.
          default: false
        umaConfigurationEndpoint:
          type: string
          description: URL for the UMA Configuration Endpoint.
          example: 'https://server.example.com/restv1/uma2-configuration'
        sectorIdentifierEndpoint:
          type: string
          description: URL for the Sector Identifier Endpoint.
          example: null
        oxElevenGenerateKeyEndpoint:
          type: string
          description: URL for the oxEleven Generate Key Endpoint.
          example: 'https://server.example.com/oxeleven/rest/oxeleven/generateKey'
        oxElevenSignEndpoint:
          type: string
          description: URL for the oxEleven Sign Endpoint.
          example: 'https://server.example.com/oxeleven/rest/oxeleven/sign'
        oxElevenVerifySignatureEndpoint:
          type: string
          description: URL for the oxEleven Verify Signature Endpoint.
          example: 'https://server.example.com/oxeleven/rest/oxeleven/verifySignature'
        oxElevenDeleteKeyEndpoint:
          type: string
          description: URL for the oxEleven Delete Key Endpoint.
          example: 'https://server.example.com/oxeleven/rest/oxeleven/deleteKey'
        oxElevenJwksEndpoint:
          type: string
          description: URL for the oxEleven JWKS Endpoint.
          example: null
        openidSubAttribute:
          type: string
          description: Specifies which LDAP attribute is used for the subject identifier claim.
          example: inum
        responseTypesSupported:
          type: array
          description: A list of the OAuth 2.0 response_type values that this OP supports.
          minItems: 1
          items:
            type: string
          enum:
            - code
            - token
            - id_token
        responseModesSupported:
          type: array
          description: A list of the OAuth 2.0 Response Mode values that this OP supports.
          items:
            type: string
          enum:
            - query
            - fragment
            - form_post
        grantTypesSupported:
          type: array
          description: A list of the OAuth 2.0 Grant Type values that this OP supports.
          items:
            type: string
          enum:
            - authorization_code
            - implicit
            - password
            - client_credentials
            - refresh_token
            - '\urn\:ietf\:params\:oauth\:grant-type\:uma-ticket'
            - '\urn\:openid\:params\:grant-type\:ciba'
        dynamicGrantTypeDefault:
          type: array
          description: list of the OAuth 2.0 Grant Type values that it's possible to set via client registration API..
          items:
            type: string
          enum:
            - authorization_code
            - implicit
            - password
            - client_credentials
            - refresh_token
            - 'urn:ietf:params:oauth:grant-type:uma-ticket'
            - 'urn:openid:params:grant-type:ciba'
        subjectTypesSupported:
          type: array
          description: A list of the Subject Identifier types that this OP supports. Valid types include pairwise and public.
          items:
            type: string
          enum:
            - public
            - pairwise
        defaultSubjectType:
          type: string
          description: Default Subject Type used for Dynamic Client Registration.
          items:
            type: string
          enum:
            - public
            - pairwise
        userInfoSigningAlgValuesSupported:
          type: array
          description: A list of the JWS signing algorithms (alg values) JWA supported by the UserInfo Endpoint to encode the Claims in a JWT.
          items:
            type: string
          enum:
            - HS256
            - HS384
            - HS512
            - RS256
            - RS384
            - RS512
            - ES256
            - ES384
            - ES512
            - PS256
            - PS384
            - PS512
        userInfoEncryptionAlgValuesSupported:
          type: array
          description: A list of the JWE encryption algorithms (alg values) JWA supported by the UserInfo Endpoint to encode the Claims in a JWT.
          items:
            type: string
          enum:
            - RSA1_5
            - RSA-OAEP
            - A128KW
            - A256KW
        userInfoEncryptionEncValuesSupported:
          type: array
          description: A list of the JWE encryption algorithms (enc values) JWA supported by the UserInfo Endpoint to encode the Claims in a JWT.
          items:
            type: string
          enum:
            - A128CBC+HS256
            - A256CBC+HS512
            - A128GCM
            - A256GCM
        idTokenSigningAlgValuesSupported:
          type: array
          description: A list of the JWS signing algorithms (alg values) supported by the OP for the ID Token to encode the Claims in a JWT.
          items:
            type: string
          enum:
            - none
            - HS256
            - HS384
            - HS512
            - RS256
            - RS384
            - RS512
            - ES256
            - ES384
            - ES512
            - PS256
            - PS384
            - PS512
        idTokenEncryptionAlgValuesSupported:
          type: array
          description: A list of the JWE encryption algorithms (alg values) supported by the OP for the ID Token to encode the Claims in a JWT.
          items:
            type: string
          enum:
            - RSA1_5
            - RSA-OAEP
            - A128KW
            - A256KW
        idTokenEncryptionEncValuesSupported:
          type: array
          description: A list of the JWE encryption algorithms (enc values) supported by the OP for the ID Token to encode the Claims in a JWT.
          items:
            type: string
          enum:
            - A128CBC+HS256
            - A256CBC+HS512
            - A128GCM
            - A256GCM
        requestObjectSigningAlgValuesSupported:
          type: array
          description: A list of the JWS signing algorithms (alg values) supported by the OP for Request Objects.
          items:
            type: string
          enum:
            - none
            - HS256
            - HS384
            - HS512
            - RS256
            - RS384
            - RS512
            - ES256
            - ES384
            - ES512
            - PS256
            - PS384
            - PS512
        requestObjectEncryptionAlgValuesSupported:
          type: array
          description: A list of the JWE encryption algorithms (alg values) supported by the OP for Request Objects.
          items:
            type: string
          enum:
            - RSA1_5
            - RSA-OAEP
            - A128KW
            - A256KW
        requestObjectEncryptionEncValuesSupported:
          type: array
          description: A list of the JWE encryption algorithms (enc values) supported by the OP for Request Objects.
          items:
            type: string
          enum:
            - A128CBC+HS256
            - A256CBC+HS512
            - A128GCM
            - A256GCM
        tokenEndpointAuthMethodsSupported:
          type: array
          description: A list of Client Authentication methods supported by this Token Endpoint.
          items:
            type: string
          enum:
            - client_secret_basic
            - client_secret_post
            - client_secret_jwt
            - private_key_jwt
        tokenEndpointAuthSigningAlgValuesSupported:
          type: array
          description: A list of the JWS signing algorithms (alg values) supported by the Token Endpoint for the signature on the JWT used to authenticate the Client at the Token Endpoint for the private_key_jwt and client_secret_jwt authentication methods.
          items:
            type: string
          enum:
            - HS256
            - HS384
            - HS512
            - RS256
            - RS384
            - RS512
            - ES256
            - ES384
            - ES512
            - PS256
            - PS384
            - PS512
        dynamicRegistrationCustomAttributes:
          type: array
          description: Custom attributes for the Dynamic registration.
          items:
            type: string
          enum:
            - jansTrustedClnt
        displayValuesSupported:
          type: array
          description: A list of the display parameter values that the OpenID Provider supports.
          items:
            type: string
          enum:
            - page
            - popup
        claimTypesSupported:
          type: array
          description: A list of the Claim Types that the OpenID Provider supports.
          items:
            type: string
          enum:
            - normal
        serviceDocumentation:
          type: string
          description: URL of a page containing human-readable information that developers might want or need to know when using the OpenID Provider.
          items:
            type: string
          format: url
          example: 'http://gluu.org/docs'
        claimsLocalesSupported:
          type: array
          description: Languages and scripts supported for values in Claims being returned.
          items:
            type: string
          enum:
            - en
        idTokenTokenBindingCnfValuesSupported:
          type: array
          description: 'Array containing a list of the JWT Confirmation Method member names supported by the OP for Token Binding of ID Tokens. The presence of this parameter indicates that the OpenID Provider supports Token Binding of ID Tokens. If omitted, the default is that the OpenID Provider does not support Token Binding of ID Tokens.'
          items:
            type: string
          enum:
            - tbh
        uiLocalesSupported:
          type: array
          description: Languages and scripts supported for the user interface.
          items:
            type: string
          enum:
            - en
            - es
        persistIdTokenInLdap:
          type: boolean
          description: Specifies whether to persist id_token into LDAP (otherwise saves into cache).
          default: false
        persistRefreshTokenInLdap:
          type: boolean
          description: Specifies whether to persist refresh_token into LDAP (otherwise saves into cache).
          default: true
        claimsParameterSupported:
          type: boolean
          description: Specifies whether the OP supports use of the claim’s parameter.
          default: false
        requestParameterSupported:
          type: boolean
          description: Boolean value specifying whether the OP supports use of the request parameter.
          default: false
        requestUriParameterSupported:
          type: boolean
          description: Boolean value specifying whether the OP supports use of the request_uri parameter.
          default: false
        requireRequestUriRegistration:
          type: boolean
          description: Boolean value specifying whether the OP requires any request_uri values used to be pre-registered using the request_uris registration parameter.
          default: false
        opPolicyUri:
          type: string
          description: URL that the OpenID Provider provides to the person registering the Client to read about the OP's requirements on how the Relying Party can use the data provided by the OP.
          example: 'http://ox.gluu.org/doku.php?id=jans:policy'
        opTosUri:
          type: string
          description: URL that the OpenID Provider provides to the person registering the Client to read about OpenID Provider's terms of service.
          example: 'http://ox.gluu.org/doku.php?id=jans:tos'
        authorizationCodeLifetime:
          type: integer
          description: The lifetime of the Authorization Code.
          multipleOf: 1
          minimum: 1
          exclusiveMinimum: false
          maximum: 2147483647
          exclusiveMaximum: false
          example: 60
        refreshTokenLifetime:
          type: integer
          description: The lifetime of the Refresh Token.
          multipleOf: 1
          minimum: 1
          exclusiveMinimum: false
          maximum: 2147483647
          exclusiveMaximum: false
          example: 14400
        idTokenLifetime:
          type: integer
          description: The lifetime of the ID Token.
          multipleOf: 1
          minimum: 1
          exclusiveMinimum: false
          maximum: 2147483647
          exclusiveMaximum: false
          example: 3600
        accessTokenLifetime:
          type: integer
          description: The lifetime of the short-lived Access Token.
          multipleOf: 1
          minimum: 1
          exclusiveMinimum: false
          maximum: 2147483647
          exclusiveMaximum: false
          example: 3600
        umaRptLifetime:
          type: integer
          description: UMA RPT lifetime.
          multipleOf: 1
          minimum: 1
          exclusiveMinimum: false
          maximum: 2147483647
          exclusiveMaximum: false
          example: 3600
        umaTicketLifetime:
          type: integer
          description: UMA ticket lifetime.
          multipleOf: 1
          minimum: 1
          exclusiveMinimum: false
          maximum: 2147483647
          exclusiveMaximum: false
          example: 3600
        umaPctLifetime:
          type: integer
          description: UMA PCT lifetime.
          multipleOf: 1
          minimum: 1
          exclusiveMinimum: false
          maximum: 2147483647
          exclusiveMaximum: false
          example: 3600
        umaResourceLifetime:
          type: integer
          description: UMA PCT lifetime.
          multipleOf: 1
          minimum: 1
          exclusiveMinimum: false
          maximum: 2147483647
          exclusiveMaximum: false
          example: 3600
        umaAddScopesAutomatically:
          type: boolean
          description: Add UMA scopes automatically if it is not registered yet.
          default: false
        umaValidateClaimToken:
          type: boolean
          description: Validate claim_token as id_token assuming it is issued by local idp.
          default: false
        umaGrantAccessIfNoPolicies:
          type: boolean
          description: Specifies whether to grant access to resources if there are no any policies associated with scopes.
          default: false
        umaRestrictResourceToAssociatedClient:
          type: boolean
          description: Restrict access to resource by associated client.
          default: false
        umaKeepClientDuringResourceSetRegistration:
          type: boolean
          description: Save client information during resource registration.
          default: false
        umaRptAsJwt:
          type: boolean
          description: Issue RPT as JWT or as random string.
          default: false
        cleanServiceInterval:
          type: integer
          description: Time interval for the Clean Service in seconds.
          multipleOf: 1
          minimum: 1
          exclusiveMinimum: false
          maximum: 2147483647
          exclusiveMaximum: false
          example: 60
        cleanServiceBaseDns:
          type: array
          description: List of additional base dns under which AS will look up for expired entities.
          items:
            type: string
          minItems: 0
          uniqueItems: true
          example:
            - ssn
        cleanServiceBatchChunkSize:
          type: integer
          description: Each clean up iteration fetches chunk of expired data per base dn and removes it from storage.
          multipleOf: 1
          minimum: 1
          exclusiveMinimum: false
          maximum: 2147483647
          exclusiveMaximum: false
          example: 10000
        keyRegenerationEnabled:
          type: boolean
          description: Boolean value specifying whether to regenerate keys.
          default: false
        keyRegenerationInterval:
          type: integer
          description: The interval for key regeneration in hours.
          multipleOf: 1
          minimum: 1
          exclusiveMinimum: false
          maximum: 2147483647
          exclusiveMaximum: false
          example: 48
        defaultSignatureAlgorithm:
          type: string
          description: The default signature algorithm to sign ID Tokens.
          items:
            type: string
          enum:
            - HS256
            - HS384
            - HS512
            - RS256
            - RS384
            - RS512
            - ES256
            - ES384
            - ES512
        oxOpenIdConnectVersion:
          type: string
          description: OpenID Connect Version.
          minLength: 1
          example: openidconnect-1.0
        jansId:
          type: string
          description: URL for the Inum generator Service.
          format: url
          minLength: 1
          example: 'https://server.example.com/oxid/service/gluu/inum'
        dynamicRegistrationEnabled:
          type: boolean
          description: Boolean value specifying whether to enable Dynamic Registration.
          default: false
        dynamicRegistrationExpirationTime:
          type: integer
          description: 'Expiration time in seconds for clients created with dynamic registration, -1 means never expire.'
          multipleOf: 1
          minimum: 0
          exclusiveMinimum: false
          maximum: 2147483647
          exclusiveMaximum: false
          default: -1
        dynamicRegistrationPersistClientAuthorizations:
          type: boolean
          description: Boolean value specifying whether to persist client authorizations.
          default: false
        trustedClientEnabled:
          type: boolean
          description: Boolean value specifying whether a client is trusted and no authorization is required.
          default: false
        dynamicRegistrationScopesParamEnabled:
          type: boolean
          description: Boolean value specifying whether to enable scopes parameter in dynamic registration.
          default: false
        dynamicRegistrationCustomObjectClass:
          type: string
          description: LDAP custom object class for dynamic registration.
          minLength: 1
        personCustomObjectClassList:
          type: array
          description: LDAP custom object class list for dynamic person enrolment.
          uniqueItems: true
          minItems: 0
          items:
            type: string
          enum:
            - gluuCustomPerson
            - gluuPerson
        authenticationFiltersEnabled:
          type: boolean
          description: Boolean value specifying whether to enable user authentication filters.
          default: false
        clientAuthenticationFiltersEnabled:
          type: boolean
          description: Boolean value specifying whether to enable client authentication filters.
          default: false
        authenticationFilters:
          type: array
          description: User authentication filters.
          uniqueItems: false
          minItems: 1
          items:
            type: object
            properties:
              filter:
                type: string
                example: '(&(mail=*{0}*)(inum={1}))'
              bind:
                type: boolean
                default: false
              bind-password-attribute:
                type: string
              base-dn:
                type: string
                example: 'ou=people,o=gluu'
        clientAuthenticationFilters:
          type: array
          description: Client authentication filters.
          uniqueItems: false
          minItems: 1
          items:
            type: object
            properties:
              filter:
                type: string
                example: 'myCustomAttr1={0}'
              bind:
                type: boolean
                default: false
              bind-password-attribute:
                type: string
              base-dn:
                type: string
                example: 'ou=clients,o=gluu'
        sessionIdUnusedLifetime:
          type: integer
          description: The lifetime for unused session states.
          multipleOf: 1
          minimum: 1
          exclusiveMinimum: false
          maximum: 2147483647
          exclusiveMaximum: false
          example: 86400
        sessionIdUnauthenticatedUnusedLifetime:
          type: integer
          description: The lifetime for unused unauthenticated session states.
          multipleOf: 1
          minimum: 1
          exclusiveMinimum: false
          maximum: 2147483647
          exclusiveMaximum: false
          default: 120
          example: 800
        sessionIdLifetime:
          type: integer
          description: The lifetime of session id in seconds. If 0 or -1 then expiration is not set. `session_id` cookie expires when browser session ends.
          multipleOf: 1
          minimum: -1
          exclusiveMinimum: false
          maximum: 2147483647
          exclusiveMaximum: false
          default: 86400
          example: 86400
        sessionIdEnabled:
          type: boolean
          description: Boolean value specifying whether to enable authentication by session_id.
          default: false
        sessionIdPersistOnPromptNone:
          type: boolean
          description: Boolean value specifying whether to persist session ID on prompt none.
          default: false
        configurationUpdateInterval:
          type: integer
          description: The interval for configuration update in seconds.
          multipleOf: 1
          minimum: 1
          exclusiveMinimum: false
          maximum: 2147483647
          exclusiveMaximum: false
          example: 3600
        cssLocation:
          type: string
          description: The location for CSS files.
          minLength: 1
        jsLocation:
          type: string
          description: The location for JavaScript files.
          minLength: 1
        imgLocation:
          type: string
          description: The location for image files.
          minLength: 1
        metricReporterInterval:
          type: integer
          description: The interval for metric reporter in seconds.
          multipleOf: 1
          minimum: 1
          exclusiveMinimum: false
          maximum: 2147483647
          exclusiveMaximum: false
          example: 300
        metricReporterKeepDataDays:
          type: integer
          description: The days to keep metric reported data.
          multipleOf: 1
          minimum: 1
          exclusiveMinimum: false
          maximum: 2147483647
          exclusiveMaximum: false
          example: 15
        metricReporterEnabled:
          type: boolean
          description: Boolean value specifying whether to enable Metric Reporter.
          default: true
        pairwiseIdType:
          type: string
          description: The pairwise ID type.
          items:
            type: string
          enum:
            - persistent
            - algorithmic
        pairwiseCalculationKey:
          type: string
          description: Key to calculate algorithmic pairwise IDs.
          minLength: 1
        pairwiseCalculationSalt:
          type: string
          description: Salt to calculate algorithmic pairwise IDs.
          minLength: 1
        shareSubjectIdBetweenClientsWithSameSectorId:
          type: boolean
          description: Share Subject ID between clients with same Sector ID.
          default: false
        webKeysStorage:
          type: string
          description: Web Key Storage Type.
          format: enum - keystore - pkcs11
        dnName:
          type: string
          description: DN of certificate issuer.
          minLength: 1
          example: CN=Jans CA Certificates
        keyStoreFile:
          type: string
          description: The Key Store File (JKS).
          minLength: 1
          example: /etc/certs/jans-auth-keys.jks
        keyStoreSecret:
          type: string
          description: The password of the Key Store.
          minLength: 1
        endSessionWithAccessToken:
          type: boolean
          description: Accept access token to call end_session endpoint.
        clientWhiteList:
          type: array
          description: White List for Client Redirection URIs.
          uniqueItems: true
          minItems: 0
          items:
            type: string
        clientBlackList:
          type: array
          description: Black List for Client Redirection URIs.
          uniqueItems: true
          minItems: 0
          items:
            type: string
        legacyIdTokenClaims:
          type: boolean
          description: Include Claims in ID Token.
        customHeadersWithAuthorizationResponse:
          type: boolean
          description: Boolean value specifying whether to enable Custom Response Header parameter to return custom headers with the Authorization Response.
        frontChannelLogoutSessionSupported:
          type: boolean
          description: Boolean value to specify support for front channel logout session.
        useCacheForAllImplicitFlowObjects:
          type: boolean
          description: Boolean value to specify whether to persist all objects into cache during Implicit Flow.
          default: false
        invalidateSessionCookiesAfterAuthorizationFlow:
          type: boolean
          description: Boolean value to specify whether to invalidate `session_id` and `consent_session_id` cookies right after successful or unsuccessful authorization.
          default: false
        updateUserLastLogonTime:
          type: boolean
          description: Boolean value to specify if application should update oxLastLogonTime attribute on user authentication.
          default: false
        updateClientAccessTime:
          type: boolean
          description: Boolean value to specify if application should update oxLastAccessTime/oxLastLogonTime attributes on client authentication.
          default: false
        enableClientGrantTypeUpdate:
          type: boolean
          description: Boolean value to specify if client can update Grant Type values.
          default: false
        loggingLevel:
          type: string
          description: Logging level for jans-auth logger.
          enum:
            - TRACE
            - DEBUG
            - INFO
            - WARN
            - ERROR
            - FATAL
            - 'OFF'
        corsConfigurationFilters:
          type: array
          description: CORS Configuration filters.
          minItems: 1
          uniqueItems: false
          items:
            type: object
            properties:
              filterName:
                type: string
                minLength: 1
              corsEnabled:
                type: boolean
                default: true
              corsAllowedOrigins:
                type: string
                minLength: 1
                default: \*
              corsAllowedMethods:
                type: string
                default: 'GET, POST, HEAD, OPTIONS'
              corsAllowedHeaders:
                type: string
                minLength: 1
                default: 'Origin, Accept, X-Requested-With, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers'
              corsExposedHeaders:
                type: string
                minLength: 1
              corsSupportCredentials:
                type: boolean
                default: true
              corsLoggingEnabled:
                type: boolean
                default: false
              corsPreflightMaxAge:
                type: integer
                multipleOf: 1
                minimum: 1
                exclusiveMinimum: false
                maximum: 2147483647
                exclusiveMaximum: false
                default: 1800
              corsRequestDecorate:
                type: boolean
                default: true
        logClientIdOnClientAuthentication:
          type: boolean
          description: Boolean value to specify if application should log the Client ID on client authentication.
        logClientNameOnClientAuthentication:
          type: boolean
          description: Boolean value to specify if application should log the Client Name on client authentication.
        authorizationRequestCustomAllowedParameters:
          type: array
          description: Authorization Request Custom Allowed Parameters.
          minItems: 0
          uniqueItems: true
          items:
            type: string
        legacyDynamicRegistrationScopeParam:
          type: boolean
          description: Legacy Dynamic Registration Scopes JSON Array Param.
        openidScopeBackwardCompatibility:
          type: boolean
          description: 'Set to false to only allow token endpoint request for openid scope with grant type equals to authorization_code, restrict access to userinfo to scope openid and only return id_token if scope contains openid.'
          default: false
        skipAuthorizationForOpenIdScopeAndPairwiseId:
          type: boolean
          description: 'If a client has only openid scope and pairwise id, person should not have to authorize.'
          default: false
        allowPostLogoutRedirectWithoutValidation:
          type: boolean
          description: Allows post logout redirect without validation for End Session Endpoint.
          default: false
        httpLoggingEnabled:
          type: boolean
          description: Enable/Disable request/response logging filter.
          default: false
        httpLoggingExludePaths:
          type: array
          description: List of base URI for which request/response logging filter should not record activity.
          minItems: 0
          uniqueItems: true
          items:
            type: string
          example: '\"/auth/img\", \"/auth/stylesheet\"'
        externalLoggerConfiguration:
          type: string
          description: Path to external log4j2 logging configuration.
          minLength: 1
          example: /identity/logviewer/configure
        disableU2fEndpoint:
          type: boolean
          description: Enable/Disable U2F endpoints.
          default: false
        disableJdkLogger:
          type: boolean
          description: Boolean value specifying whether to enable JDK Loggers.
          default: true
        jmsUserName:
          type: string
          description: JMS UserName.
          minLength: 1
        jmsPassword:
          type: string
          description: JMS Password.
          minLength: 1
        jmsBrokerURISet:
          type: array
          description: JMS Broker URI Set.
          format: select
          items:
            type: string
        oxElevenTestModeToken:
          type: string
          description: oxEleven Test Mode Token.
          minLength: 1
        enabledOAuthAuditLogging:
          type: boolean
          description: enabled OAuth Audit Logging.
        authenticationProtectionConfiguration:
          type: object
          description: Authentication Brute Force Protection Configuration.
          properties:
            attemptExpiration:
              type: integer
              multipleOf: 1
              minimum: 1
              maximum: 2147483647
              exclusiveMinimum: false
              exclusiveMaximum: false
            maximumAllowedAttemptsWithoutDelay:
              type: integer
              multipleOf: 1
              minimum: 1
              maximum: 2147483647
              exclusiveMinimum: false
              exclusiveMaximum: false
            delayTime:
              type: integer
              multipleOf: 1
              minimum: 1
              maximum: 2147483647
              exclusiveMinimum: false
              exclusiveMaximum: false
            bruteForceProtectionEnabled:
              type: boolean
        errorHandlingMethod:
          type: string
          description: A list of possible error handling methods.
          format: enum - internal - remote
        useLocalCache:
          type: boolean
          description: 'Boolean value specifying whether to enable local in-memory cache for attributes, scopes, clients and organization configuration.'
          default: false
        spontaneousScopeLifetime:
          type: integer
          description: The lifetime of spontaneous scope in seconds.
          multipleOf: 1
          minimum: 1
          maximum: 2147483647
          exclusiveMinimum: false
          exclusiveMaximum: false
        jwksAlgorithmsSupported:
          type: array
          description: A list of algorithms that will be used in JWKS endpoint.
          minItems: 1
          uniqueItems: true
          items:
            type: string
          enum:
            - RS256
            - RS384
            - RS512
            - ES256
            - ES384
            - ES512
            - PS256
            - PS384
            - PS512
            - RSA1_5
            - RSA-OAEP
        dynamicRegistrationPasswordGrantTypeEnabled:
          type: boolean
          description: Boolean value specifying whether to enable Password Grant Type during Dynamic Registration.
          default: false
        returnClientSecretOnRead:
          type: boolean
          description: Boolean value specifying whether a client_secret is returned on client GET or PUT. Set to false by default which means to not return secret.
          default: false
        rejectJwtWithNoneAlg:
          type: boolean
          description: Boolean value specifying whether reject JWT requested or validated with algorithm None. Default value is true.
          default: true
        expirationNotificatorEnabled:
          type: boolean
          description: 'Boolean value specifying whether expiration notificator is enabled (used to identify expiration for persistence that support TTL, like Couchbase).'
          default: true
        expirationNotificatorMapSizeLimit:
          type: integer
          description: The expiration notificator maximum size limit.
          default: 100000
        expirationNotificatorIntervalInSeconds:
          type: integer
          description: The expiration notificator interval in seconds.
          default: 600
        clientRegDefaultToCodeFlowWithRefresh:
          type: boolean
          description: Boolean value specifying whether to add Authorization Code Flow with Refresh grant during client registration.
        sessionIdRequestParameterEnabled:
          type: boolean
          description: Boolean value specifying whether to enable session_id HTTP request parameter.
          default: false
        changeSessionIdOnAuthentication:
          type: boolean
          description: Boolean value specifying whether to enable session_id HTTP request parameter.
          default: true
        serverSessionIdLifetime:
          type: integer
          description: The sessionId lifetime in seconds for sessionId.
          default: 86400
        cookieDomain:
          type: string
          description: Sets cookie domain for all cookies created by OP.
        loggingLayout:
          type: string
          description: Logging layout used for Jans Authorization Server loggers.
          enum:
            - text
            - json
        fapiCompatibility:
          type: boolean
          description: Boolean value specifying whether turn on FAPI compatibility mode. If true AS behaves in more strict mode.
          default: false
        forceIdTokenHintPrecense:
          type: boolean
          description: Boolean value specifying whether force id_token_hint parameter presence (false by default).
          default: false
        forceOfflineAccessScopeToEnableRefreshToken:
          type: boolean
          description: Boolean value specifying whether force offline_access scope to enable refresh_token grant type. Default value is true.
          default: true
        errorReasonEnabled:
          type: boolean
          description: Boolean value specifying whether to return detailed reason of the error from AS. Default value is false.
          default: false
        removeRefreshTokensForClientOnLogout:
          type: boolean
          description: Boolean value specifying whether to remove refresh tokens on logout. Default value is true.
          default: true
        consentGatheringScriptBackwardCompatibility:
          type: boolean
          description: Boolean value specifying whether turn on Consent Gathering Script backward compatibility mode. If true AS will pick up script with higher level globally. If false (default) AS will pick up script based on client configuration.
          default: false
        introspectionScriptBackwardCompatibility:
          type: boolean
          description: Boolean value specifying whether switch off client's introspection scripts (true value) and run all scripts that exists on server. Default value is false.
          default: false
        keepAuthenticatorAttributesOnAcrChange:
          type: boolean
          description: Boolean value specifying whether to keep authenticator attributes on ACR change.
          default: false
        backchannelClientId:
          type: string
          description: Backchannel Client Id.
          minLength: 0
        backchannelRedirectUri:
          type: string
          description: Backchannel Redirect Uri.
          minLength: 0
          example: 'https://server.example.com/oxeleven/rest/backchannel/backchannelRedirectUri'
        backchannelAuthenticationEndpoint:
          type: string
          description: Backchannel Authentication Endpoint.
          minLength: 0
          example: 'https://server.example.com/oxeleven/rest/backchannel/backchannelAuthenticationEndpoint()'
        backchannelDeviceRegistrationEndpoint:
          type: string
          description: Backchannel Device Registration Endpoint.
          minLength: 0
          example: 'https://server.example.com/oxeleven/rest/backchannel/backchannelDeviceRegistrationEndpoint'
        backchannelTokenDeliveryModesSupported:
          type: array
          description: Backchannel Token Delivery Modes Supported.
          minItems: 0
          uniqueItems: true
          items:
            type: string
          format: select - poll - ping - push
        backchannelAuthenticationRequestSigningAlgValuesSupported:
          type: array
          description: Backchannel Authentication Request Signing Alg Values Supported.
          minItems: 0
          uniqueItems: true
          items:
            type: string
          format: select - RS512 - ES256 - ES384 - ES512 - PS256 - PS384 - PS512
        backchannelUserCodeParameterSupported:
          type: boolean
          description: Backchannel User Code Parameter Supported
        backchannelBindingMessagePattern:
          type: string
          description: Backchannel Binding Message Pattern.
          minLength: 0
        backchannelAuthenticationResponseExpiresIn:
          type: integer
          description: Backchannel Authentication Response Expires In.
          multipleOf: 1
          minimum: 1
          maximum: 2147483647
          exclusiveMinimum: false
          exclusiveMaximum: false
        backchannelAuthenticationResponseInterval:
          type: integer
          description: Backchannel Authentication Response Interval.
          multipleOf: 1
          minimum: 1
          maximum: 2147483647
          exclusiveMinimum: false
          exclusiveMaximum: false
        backchannelLoginHintClaims:
          type: array
          description: Backchannel Login Hint Claims.
          minItems: 0
          uniqueItems: true
          items:
            type: string
        cibaEndUserNotificationConfig:
          type: object
          description: CIBA End User Notification Config.
          required:
            - apiKey
            - authDomain
            - databaseURL
            - projectId
            - storageBucket
            - messagingSenderId
            - appId
            - notificationUrl
            - notificationKey
            - publicVapidKey
          properties:
            apiKey:
              type: string
              minLength: 1
            authDomain:
              type: string
              minLength: 1
            databaseURL:
              type: string
              minLength: 1
            projectId:
              type: string
              minLength: 1
            storageBucket:
              type: string
              minLength: 1
            messagingSenderId:
              type: string
              minLength: 1
            appId:
              type: string
              minLength: 1
            notificationUrl:
              type: string
              minLength: 1
            notificationKey:
              type: string
              minLength: 1
            publicVapidKey:
              type: string
              minLength: 1
        backchannelRequestsProcessorJobIntervalSec:
          type: integer
          description: Specifies the allowable elapsed time in seconds backchannel request processor executes.
        backchannelRequestsProcessorJobChunkSize:
          type: integer
          description: Each backchannel request processor iteration fetches chunk of data to be processed.
        cibaGrantLifeExtraTimeSec:
          type: integer
          description: Specifies the CIBA Grant life extra time in seconds.
        cibaMaxExpirationTimeAllowedSec:
          type: integer
          description: Specifies the CIBA token expiration time in seconds.
    GluuAttribute:
      title: GluuAttribute
      description: Attribute.
      type: object
      required:
        - name
        - displayName
        - dataType
        - status
      properties:
        name:
          type: string
          description: Name of the attribute.
          example: 'name, displayName, birthdate, email'
        displayName:
          type: string
          items:
            type: string
        description:
          type: string
          description: User friendly descriptive detail of attribute.
        dataType:
          type: string
          description: Data Type of attribute.
          enum:
            - STRING
            - NUMERIC
            - BOOLEAN
            - BINARY
            - DATE
        status:
          type: string
          description: Distinguished Name
        jansMultivaluedAttr:
          type: boolean
          description: Boolean value indicating if the attribute is multi-value
        lifetime:
          type: string
        sourceAttribute:
          type: string
        salt:
          type: string
        nameIdType:
          type: string
        origin:
          type: string
        editType:
          type: array
          description: GluuUserRole
          items:
            type: string
        viewType:
          type: array
          description: GluuUserRole
          items:
            type: string
        usageType:
          type: object
          description: GluuAttributeUsageType
          items:
            type: string
        jansAttrName:
          type: string
        seeAlso:
          type: string
        saml1Uri:
          type: string
        saml2Uri:
          type: string
        urn:
          type: string
        jansSCIMCustomAttr:
          type: boolean
          description: Boolean value indicating if the attribute is a SCIM custom attribute
        custom:
          type: boolean
          description: Boolean value indicating if the attribute is a custom attribute
        requred:
          type: boolean
          description: Boolean value indicating is a mandatory attribute
        attributeValidation:
          type: object
          description: Details of validations to be applied on the attribute
          properties:
            regexp:
              type: string
              description: Reguar expression to be used to validate the dataType.
            minLength:
              type: integer
            maxLength:
              type: integer
        gluuTooltip:
          type: string    
    PatchRequest: 
      description: A JSONPatch document as defined by RFC 6902 
      required:
       - "op"
       - "path"
      properties: 
       op: 
        type: string 
        description: The operation to be performed 
        enum:
         - "add"
         - "remove"
         - "replace"
         - "move"
         - "copy"
         - "test"
       path: 
        type: string 
        description: A JSON-Pointer 
       value: 
        type: object 
        description: The value to be used within the operations.
    Scope:
      title: Scope
      description: Auth Scope.
      type: object
      properties:
        dn:
          type: string
        id:
          description: The base64url encoded id.
          type: string
        inum:
          description: Unique id identifying the attribute
          type: string
        displayName:
          description: A human-readable name of the scope.
          type: string
        description:
          description: A human-readable string describing the scope.
          type: string
        iconUrl:
          description: A URL for a graphic icon representing the scope. The referenced icon MAY be used by the authorization server in any user interface it presents to the resource owner.
          type: string
        authorizationPolicies:
          description: Policies associated with all scopes.
          type: array
          items:
            type: string
        defaultScope:
          description: Boolean value to specify default scope.
          type: boolean
        scopeType:
          description: The scopes type associated with Access Tokens determine what resources will.
          type: string
          enum:
            - OpenID
            - Dynamic
            - OAuth
        jansClaim:
          description: Claim attributes associated with the scope.
          type: array
          items:
            type: string
        umaType:
          type: boolean
        umaAuthorizationPolicies:
          type: array
          items:
            type: string
        attributes:
          type: object
          description: ScopeAttributes
          properties:
            spontaneousClientId:
              type: string
            spontaneousClientScopes:
              type: array
              items:
                type: string
            showInConfigurationEndpoint:
              type: boolean
    CustomAttribute:
      title: CustomAttribute
      description: Attribute.
      type: object
      required:
        - name
        - multiValued
        - values
      properties:
        name:
          type: string
          description: Name of the attribute.
          example: 'name, displayName, birthdate, email'
        multiValued:
          type: boolean
          description: Indicates if the attribute can hold multiple values.
        values:
          type: array
          items:
            type: string
    ClientAttributes:
      title: ClientAttributes
      description: Attribute.
      type: object
      properties:
        tlsClientAuthSubjectDn:
          type: string
        runIntrospectionScriptBeforeAccessTokenAsJwtCreationAndIncludeClaims:
          description: Run Introspection Script Before Access Token as Jwt Creation and Include Claims. Default value is false.
          type: boolean
        keepClientAuthorizationAfterExpiration:
          description: Keep Client Authorization After Expiration.
          type: boolean
        allowSpontaneousScopes:
          type: boolean
        spontaneousScopes:
          type: array
          items:
            type: string
        spontaneousScopeScriptDns:
          type: array
          items:
            type: string        
        backchannelLogoutUri:
          type: array
          items:
            type: string        
        backchannelLogoutSessionRequired:
          type: boolean
        additionalAudience:
          type: array
          items:
            type: string   
        postAuthnScripts:
          type: array
          items:
            type: string   
        consentGatheringScripts:
          type: array
          items:
            type: string   
        introspectionScripts:
          type: array
          items:
            type: string   
        rptClaimsScripts:
          type: array
          items:
            type: string   
    Client:
      title: Client object
      description: Client.
      type: object
      properties:
        inum:
          description: XRI i-number. Client Identifier to uniquely identify the client.
          type: string
        client_secret:
          type: string
          description: The client secret.  The client MAY omit the parameter if the client secret is an empty string.
        frontChannelLogoutUri:
          type: string
        frontChannelLogoutSessionRequired:
          type: boolean
        registrationAccessToken:
          type: string
        clientIdIssuedAt:
          type: string
          format: date
        clientSecretExpiresAt:
          type: string
          format: date	
        redirect_uris:
          description: Redirection URI values used by the Client. One of these registered Redirection URI values must exactly match the redirect_uri parameter value used in each Authorization Request
          type: array
          items:
            type: string
          example:
            - 'https://client.example.org/cb'	        
        claimRedirectUris:
          description: Array of The Claims Redirect URIs to which the client wishes the authorization server to direct the requesting party's user agent after completing its interaction.
          type: array
          items:
            type: string  
        responseTypes:
          description: 'A list of the OAuth 2.0 response_type values that the Client is declaring that it will restrict itself to using. If omitted, the default is that the Client will use only the code Response Type. Allowed values are code, token, id_token.'
          type: array
          items:
            type: string
            enum:
              - CODE
              - TOKEN
              - ID_TOKEN        
        grantTypes:
          description: A list of the OAuth 2.0 Grant Types that the Client is declaring that it will restrict itself to using.
          type: array
          items:
            type: string
            enum:
              - AUTHORIZATION_CODE
              - IMPLICIT
              - RESOURCE_OWNER_PASSWORD_CREDENTIALS
              - CLIENT_CREDENTIALS
              - REFRESH_TOKEN
              - OXAUTH_UMA_TICKET
              - CIBA
              - DEVICE_CODE        
        applicationType:
          description: 'Kind of the application. The default, if omitted, is web. The defined values are native or web. Web Clients using the OAuth Implicit Grant Type must only register URLs using the HTTPS scheme as redirect_uris, they must not use localhost as the hostname. Native Clients must only register redirect_uris using custom URI schemes or URLs using the http scheme with localhost as the hostname.'
          type: string
          enum:
            - Web
            - Native        
        contacts:
          description: e-mail addresses of people responsible for this Client.
          type: array
          items:
            type: string
        clientName:
          description: A human-readable name of the client.
          type: string        
        idTokenTokenBindingCnf:
          description: 'Specifies the JWT Confirmation Method member name (e.g. tbh) that the Relying Party expects when receiving Token Bound ID Tokens. The presence of this parameter indicates that the Relying Party supports Token Binding of ID Tokens. If omitted, the default is that the Relying Party does not support Token Binding of ID Tokens.'
          type: string         
        logoUri:
          description: URL that references a logo for the Client application.
          type: string
        clientUri:
          description: URL of the home page of the Client. The value of this field must point to a valid Web page.
          type: string
        policyUri:
          description: URL that the Relying Party Client provides to the End-User to read about the how the profile data will be used.
          type: string
        tosUri:
          description: URL that the Relying Party Client provides to the End-User to read about the Relying Party's terms of service.
          type: string
        jwksUri:
          description: 'URL for the Client''s JSON Web Key Set (JWK) document containing key(s) that are used for signing requests to the OP. The JWK Set may also contain the Client''s encryption keys(s) that are used by the OP to encrypt the responses to the Client. When both signing and encryption keys are made available, a use (Key Use) parameter value is required for all keys in the document to indicate each key''s intended usage.'
          type: string
        jwks:
          description: 'List of JSON Web Key (JWK) - A JSON object that represents a cryptographic key. The members of the object represent properties of the key, including its value.'
          type: array
          items:
            $ref: '#/components/schemas/JsonWebKey'
          example: '{ "keys" : [ { "e" : "AQAB", "n" : "gmlDX_mgMcHX.." ] }'
        sectorIdentifierUri:
          description: URL using the https scheme to be used in calculating Pseudonymous Identifiers by the OP.
          type: string
        subjectType:
          description: Subject type requested for the Client ID. Valid types include pairwise and public.
          type: string
          enum:
            - PAIRWISE
            - PUBLIC          
        idTokenSignedResponseAlg:
          description: JWS alg algorithm (JWA) required for signing the ID Token issued to this Client.
          type: string
          enum:
            - HS256 - HS384 - HS512 - RS256 - RS384 - RS512 - ES256 - ES384 - ES512 - PS256 - PS384 - PS512
        idTokenEncryptedResponseAlg:
          description: JWE alg algorithm (JWA) required for encrypting the ID Token issued to this Client.
          type: string
          enum:
            - RSA1_5
            - RSA-OAEP
            - A128KW
            - A256KW
        idTokenEncryptedResponseEnc:
          description: JWE enc algorithm (JWA) required for encrypting the ID Token issued to this Client.
          type: string
          enum:
            - A128CBC+HS256
            - A256CBC+HS512
            - A128GCM
            - A256GCM
        userInfoSignedResponseAlg:
          description: JWS alg algorithm (JWA) required for signing UserInfo Responses.
          type: string
          enum:
            - HS256
            - HS384
            - HS512
            - RS256
            - RS384
            - RS512
            - ES256
            - ES384
            - ES512
            - PS256
            - PS384
            - PS512
        userInfoEncryptedResponseAlg:
          description: JWE alg algorithm (JWA) required for encrypting UserInfo Responses.
          type: string
          enum:
            - RSA1_5
            - RSA-OAEP
            - A128KW
            - A256KW
        userInfoEncryptedResponseEnc:
          description: JWE enc algorithm (JWA) required for encrypting UserInfo Responses.
          type: string
          enum:
            - A128CBC+HS256
            - A256CBC+HS512
            - A128GCM
            - A256GCM
        requestObjectSigningAlg:
          description: JWS alg algorithm (JWA) that must be used for signing Request Objects sent to the OP.
          type: string
          enum:
            - HS256
            - HS384
            - HS512
            - RS256
            - RS384
            - RS512
            - ES256
            - ES384
            - ES512
            - PS256
            - PS384
            - PS512
        requestObjectEncryptionAlg:
          description: JWE alg algorithm (JWA) the RP is declaring that it may use for encrypting Request Objects sent to the OP.
          type: string
          enum:
            - RSA1_5
            - RSA-OAEP
            - A128KW
            - A256KW
        requestObjectEncryptionEnc:
          description: JWE enc algorithm (JWA) the RP is declaring that it may use for encrypting Request Objects sent to the OP.
          type: string
          enum:
            - A128CBC+HS256
            - A256CBC+HS512
            - A128GCM
            - A256GCM
        tokenEndpointAuthMethod:
          description: Requested Client Authentication method for the Token Endpoint.
          type: string
          enum:
            - client_secret_basic
            - client_secret_post
            - client_secret_jwt
            - private_key_jwt
            - none
        tokenEndpointAuthSigningAlg:
          description: JWS alg algorithm (JWA) that must be used for signing the JWT used to authenticate the Client at the Token Endpoint for the private_key_jwt and client_secret_jwt authentication methods.
          type: string
          enum:
            - HS256
            - HS384
            - HS512
            - RS256
            - RS384
            - RS512
            - ES256
            - ES384
            - ES512
            - PS256
            - PS384
            - PS512
        defaultMaxAge:
          description: Specifies the Default Maximum Authentication Age.
          type: integer
          format: int32
          example: 1000000
        requireAuthTime:
          description: Boolean value specifying whether the auth_time Claim in the ID Token is required. It is required when the value is true.
          type: boolean         
        defaultAcrValues:
          description: Array of default requested Authentication Context Class Reference values that the Authorization Server must use for processing requests from the Client.
          type: array
          items:
            type: string
        initiateLoginUri:
          description: Specifies the URI using the https scheme that the authorization server can call to initiate a login at the client.
          type: string         
        postLogoutRedirectUris:
          description: Provide the URLs supplied by the RP to request that the user be redirected to this location after a logout has been performed.
          type: array
          items:
            type: string
          example:
            - 'https://client.example.org/logout/page1'
            - 'https://client.example.org/logout/page2'
            - 'https://client.example.org/logout/page3'         
        requestUris:
          description: Provide a list of requests_uri values that are pre-registered by the Client for use at the Authorization Server.
          type: array
          items:
            type: string        
        scopes:
          description: Provide list of scopes granted to the client.
          type: array
          items:
            type: string
          example:
            - read write dolphin        
        claims:
          description: Provide list of claims granted to the client.
          type: array
          items:
            type: string
            description: String containing a space-separated list of claims that can be requested individually.        
        trustedClient:
          description: Attribute which corresponds to the "Pre-Authorization" property. Default value is false.
          type: boolean        
        lastAccessTime:
          description: 'Integer timestamp, measured in the number of seconds since January 1 1970 UTC, indicating last access time.'
          type: string
          format: date
        lastLogonTime:
          description: 'Integer timestamp, measured in the number of seconds since January 1 1970 UTC, indicating last login time.'
          type: string
          format: date        
        persistClientAuthorizations:
          description: Specifies if the client authorization details are to be persisted. Default value is true.
          type: boolean
        includeClaimsInIdToken:
          description: 'If true then claims are included in token id, default value is false.'
          type: boolean
        refreshTokenLifetime:
          description: Specifies the Client-specific refresh token expiration.
          type: integer
          format: int32
          example: 100000000
        accessTokenLifetime:
          description: Specifies the Client-specific access token expiration.
          type: integer
          format: int32
          example: 100000000        
        customAttributes:
          type: array
          items:
            $ref: '#/components/schemas/CustomAttribute'        
        customObjectClasses:
          type: array
          items:
            type: string        
        rptAsJwt:
          description: Specifies whether RPT should be return as signed JWT.
          type: boolean
        accessTokenAsJwt:
          description: Specifies whether access token as signed JWT.
          type: boolean
        accessTokenSigningAlg:
          description: 'Specifies signing algorithm that has to be used during JWT signing. If it''s not specified, then the default OP signing algorithm will be used.'
          type: string
          enum:
            - HS256
            - HS384
            - HS512
            - RS256
            - RS384
            - RS512
            - ES256
            - ES384
            - ES512
            - PS256
            - PS384
            - PS512
        disabled:
          description: Specifies whether client is disabled.
          type: boolean        
        authorizedOrigins:
          description: Specifies authorized JavaScript origins.
          type: array
          items:
            type: string
        softwareId:
          description: Specifies a unique identifier string (UUID) assigned by the client developer or software publisher used by registration endpoints to identify the client software to be dynamically registered.
          type: string
          example: 4NRB1-0XZABZI9E6-5SM3R
        softwareVersion:
          description: Specifies a version identifier string for the client software identified by 'software_id'. The value of the 'software_version' should change on any update to the client software identified by the same 'software_id'.
          type: string
          example: '2.1'
        softwareStatement:
          description: Specifies a software statement containing client metadata values about the client software as claims. This is a string value containing the entire signed JWT.
          type: string
        attributes:
          type: object
          items:
            $ref: '#/components/schemas/ClientAttributes'        
        backchannelTokenDeliveryMode:
          description: specifies how backchannel token will be delivered.
          type: string
          enum: 
            - poll
            - ping
            - push        
        backchannelClientNotificationEndpoint:
          description: 'Client Initiated Backchannel Authentication (CIBA) enables a Client to initiate the authentication of an end-user by means of out-of-band mechanisms. Upon receipt of the notification, the Client makes a request to the token endpoint to obtain the tokens.'
          type: string        
        backchannelAuthenticationRequestSigningAlg:
          description: 'The JWS algorithm alg value that the Client will use for signing authentication request, as described in Section 7.1.1. of OAuth 2.0 [RFC6749]. When omitted, the Client will not send signed authentication requests.'
          type: string
          enum:
            - RS256
            - RS384
            - RS512
            - ES256
            - ES384
            - ES512
            - PS256
            - PS384
            - PS512        
        backchannelUserCodeParameter:
          description: 'Boolean value specifying whether the Client supports the user_code parameter. If omitted, the default value is false.'
          type: boolean
        exp:
          description: 'Integer timestamp, measured in the number of seconds since January 1 1970 UTC, indicating when this permission will expire.'
          type: string
          format: date      
        deletable:
          description: Specifies whether client is deletable.
          type: boolean          
        jansId:
          description: Attribute Scope Id.
          type: string
    UmaResource:
      title: UMAResource object
      description: UMAResource
      type: object
      properties:
        dn:
          type: string
        inum:
          description: XRI i-number. Client Identifier to uniquely identify the UMAResource.
          type: string
        id:
          description: Resource id.
          type: string
        name:
          description: A human-readable name of the scope.
          type: string
        iconUrl:
          description: A URL for a graphic icon representing the resource.
          type: string
        scopes:
          description: Applicable resource scopes.
          type: array
          items:
            type: string
        scopeExpression:
          description: Resource scope expression.
          type: string
        clients:
          description: List of client assosiated with the resource.
          type: array
          items:
            type: string
        resources:
          description: List of assosiated resource.
          type: array
          items:
            type: string
        rev:
          description: Resource revision.
          type: string
        creator:
          description: Resource creator or owner.
          type: string
        description:
          description: Resource description.
          type: string
        type:
          description: Resource type.
          type: string
        creationDate:
          description: 'Integer timestamp, measured in the number of seconds since January 1 1970 UTC, indicating when this resource will created.'
          type: string
          format: date  
        expirationDate:
          description: 'Integer timestamp, measured in the number of seconds since January 1 1970 UTC, indicating when this resource will expire.'
          type: string
          format: date      
        deletable:
          description: Specifies whether client is deletable.
          type: boolean 
    SectorIdentifier:
      type: object
      description: Sector Identifier Details.
      properties:
        id:
          description: XRI i-number. Sector Identifier to uniquely identify the sector.
          type: string
        description:
          description: A human-readable string describing the sector.
          type: string
        redirectUris:
          description: Redirection URI values used by the Client. One of these registered Redirection URI values must exactly match the redirect_uri parameter value used in each Authorization Request
          type: array
          items:
            type: string
          example:
            - 'https://client.example.org/cb'
        clientIds:
          description: List of OAuth 2.0 Client Identifier valid at the Authorization Server.
          type: array
          items:
            type: string
          example: 1402.0ab17362-36cc-4ac8-9c73-20239de64364 API Requesting Party Client.