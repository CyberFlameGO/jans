# coding: utf-8

"""
    jans-config-api

    jans-config-api - Authorization services  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: xxx@gluu.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Scope(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dn': 'str',
        'inum': 'str',
        'display_name': 'str',
        'id': 'str',
        'icon_url': 'str',
        'description': 'str',
        'scope_type': 'str',
        'claims': 'list[str]',
        'default_scope': 'bool',
        'group_claims': 'bool',
        'dynamic_scope_scripts': 'list[str]',
        'uma_authorization_policies': 'list[str]',
        'attributes': 'ScopeAttributes',
        'uma_type': 'bool',
        'deletable': 'bool',
        'expiration_date': 'date'
    }

    attribute_map = {
        'dn': 'dn',
        'inum': 'inum',
        'display_name': 'displayName',
        'id': 'id',
        'icon_url': 'iconUrl',
        'description': 'description',
        'scope_type': 'scopeType',
        'claims': 'claims',
        'default_scope': 'defaultScope',
        'group_claims': 'groupClaims',
        'dynamic_scope_scripts': 'dynamicScopeScripts',
        'uma_authorization_policies': 'umaAuthorizationPolicies',
        'attributes': 'attributes',
        'uma_type': 'umaType',
        'deletable': 'deletable',
        'expiration_date': 'expirationDate'
    }

    def __init__(self, dn=None, inum=None, display_name=None, id=None, icon_url=None, description=None, scope_type=None, claims=None, default_scope=None, group_claims=None, dynamic_scope_scripts=None, uma_authorization_policies=None, attributes=None, uma_type=False, deletable=False, expiration_date=None):  # noqa: E501
        """Scope - a model defined in Swagger"""  # noqa: E501
        self._dn = None
        self._inum = None
        self._display_name = None
        self._id = None
        self._icon_url = None
        self._description = None
        self._scope_type = None
        self._claims = None
        self._default_scope = None
        self._group_claims = None
        self._dynamic_scope_scripts = None
        self._uma_authorization_policies = None
        self._attributes = None
        self._uma_type = None
        self._deletable = None
        self._expiration_date = None
        self.discriminator = None
        if dn is not None:
            self.dn = dn
        if inum is not None:
            self.inum = inum
        self.display_name = display_name
        if id is not None:
            self.id = id
        if icon_url is not None:
            self.icon_url = icon_url
        if description is not None:
            self.description = description
        self.scope_type = scope_type
        if claims is not None:
            self.claims = claims
        if default_scope is not None:
            self.default_scope = default_scope
        if group_claims is not None:
            self.group_claims = group_claims
        if dynamic_scope_scripts is not None:
            self.dynamic_scope_scripts = dynamic_scope_scripts
        if uma_authorization_policies is not None:
            self.uma_authorization_policies = uma_authorization_policies
        if attributes is not None:
            self.attributes = attributes
        if uma_type is not None:
            self.uma_type = uma_type
        if deletable is not None:
            self.deletable = deletable
        self.expiration_date = expiration_date

    @property
    def dn(self):
        """Gets the dn of this Scope.  # noqa: E501


        :return: The dn of this Scope.  # noqa: E501
        :rtype: str
        """
        return self._dn

    @dn.setter
    def dn(self, dn):
        """Sets the dn of this Scope.


        :param dn: The dn of this Scope.  # noqa: E501
        :type: str
        """

        self._dn = dn

    @property
    def inum(self):
        """Gets the inum of this Scope.  # noqa: E501

        Unique id identifying the .  # noqa: E501

        :return: The inum of this Scope.  # noqa: E501
        :rtype: str
        """
        return self._inum

    @inum.setter
    def inum(self, inum):
        """Sets the inum of this Scope.

        Unique id identifying the .  # noqa: E501

        :param inum: The inum of this Scope.  # noqa: E501
        :type: str
        """

        self._inum = inum

    @property
    def display_name(self):
        """Gets the display_name of this Scope.  # noqa: E501

        A human-readable name of the scope.  # noqa: E501

        :return: The display_name of this Scope.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Scope.

        A human-readable name of the scope.  # noqa: E501

        :param display_name: The display_name of this Scope.  # noqa: E501
        :type: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")  # noqa: E501

        self._display_name = display_name

    @property
    def id(self):
        """Gets the id of this Scope.  # noqa: E501

        The base64url encoded id.  # noqa: E501

        :return: The id of this Scope.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Scope.

        The base64url encoded id.  # noqa: E501

        :param id: The id of this Scope.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def icon_url(self):
        """Gets the icon_url of this Scope.  # noqa: E501

        A URL for a graphic icon representing the scope. The referenced icon MAY be used by the authorization server in any user interface it presents to the resource owner.  # noqa: E501

        :return: The icon_url of this Scope.  # noqa: E501
        :rtype: str
        """
        return self._icon_url

    @icon_url.setter
    def icon_url(self, icon_url):
        """Sets the icon_url of this Scope.

        A URL for a graphic icon representing the scope. The referenced icon MAY be used by the authorization server in any user interface it presents to the resource owner.  # noqa: E501

        :param icon_url: The icon_url of this Scope.  # noqa: E501
        :type: str
        """

        self._icon_url = icon_url

    @property
    def description(self):
        """Gets the description of this Scope.  # noqa: E501

        A human-readable string describing the scope.  # noqa: E501

        :return: The description of this Scope.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Scope.

        A human-readable string describing the scope.  # noqa: E501

        :param description: The description of this Scope.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def scope_type(self):
        """Gets the scope_type of this Scope.  # noqa: E501

        The scopes type associated with Access Tokens determine what resources will.  # noqa: E501

        :return: The scope_type of this Scope.  # noqa: E501
        :rtype: str
        """
        return self._scope_type

    @scope_type.setter
    def scope_type(self, scope_type):
        """Sets the scope_type of this Scope.

        The scopes type associated with Access Tokens determine what resources will.  # noqa: E501

        :param scope_type: The scope_type of this Scope.  # noqa: E501
        :type: str
        """
        if scope_type is None:
            raise ValueError("Invalid value for `scope_type`, must not be `None`")  # noqa: E501
        allowed_values = ["openid", "dynamic", "uma", "spontaneous", "oauth"]  # noqa: E501
        if scope_type not in allowed_values:
            raise ValueError(
                "Invalid value for `scope_type` ({0}), must be one of {1}"  # noqa: E501
                .format(scope_type, allowed_values)
            )

        self._scope_type = scope_type

    @property
    def claims(self):
        """Gets the claims of this Scope.  # noqa: E501

        Claim attributes associated with the scope.  # noqa: E501

        :return: The claims of this Scope.  # noqa: E501
        :rtype: list[str]
        """
        return self._claims

    @claims.setter
    def claims(self, claims):
        """Sets the claims of this Scope.

        Claim attributes associated with the scope.  # noqa: E501

        :param claims: The claims of this Scope.  # noqa: E501
        :type: list[str]
        """

        self._claims = claims

    @property
    def default_scope(self):
        """Gets the default_scope of this Scope.  # noqa: E501

        Boolean value to specify default scope.  # noqa: E501

        :return: The default_scope of this Scope.  # noqa: E501
        :rtype: bool
        """
        return self._default_scope

    @default_scope.setter
    def default_scope(self, default_scope):
        """Sets the default_scope of this Scope.

        Boolean value to specify default scope.  # noqa: E501

        :param default_scope: The default_scope of this Scope.  # noqa: E501
        :type: bool
        """

        self._default_scope = default_scope

    @property
    def group_claims(self):
        """Gets the group_claims of this Scope.  # noqa: E501

        Specifies if the scope is group claims.  # noqa: E501

        :return: The group_claims of this Scope.  # noqa: E501
        :rtype: bool
        """
        return self._group_claims

    @group_claims.setter
    def group_claims(self, group_claims):
        """Sets the group_claims of this Scope.

        Specifies if the scope is group claims.  # noqa: E501

        :param group_claims: The group_claims of this Scope.  # noqa: E501
        :type: bool
        """

        self._group_claims = group_claims

    @property
    def dynamic_scope_scripts(self):
        """Gets the dynamic_scope_scripts of this Scope.  # noqa: E501

        Dynamic Scope Scripts associated with the scope.  # noqa: E501

        :return: The dynamic_scope_scripts of this Scope.  # noqa: E501
        :rtype: list[str]
        """
        return self._dynamic_scope_scripts

    @dynamic_scope_scripts.setter
    def dynamic_scope_scripts(self, dynamic_scope_scripts):
        """Sets the dynamic_scope_scripts of this Scope.

        Dynamic Scope Scripts associated with the scope.  # noqa: E501

        :param dynamic_scope_scripts: The dynamic_scope_scripts of this Scope.  # noqa: E501
        :type: list[str]
        """

        self._dynamic_scope_scripts = dynamic_scope_scripts

    @property
    def uma_authorization_policies(self):
        """Gets the uma_authorization_policies of this Scope.  # noqa: E501

        Policies associated with scopes.  # noqa: E501

        :return: The uma_authorization_policies of this Scope.  # noqa: E501
        :rtype: list[str]
        """
        return self._uma_authorization_policies

    @uma_authorization_policies.setter
    def uma_authorization_policies(self, uma_authorization_policies):
        """Sets the uma_authorization_policies of this Scope.

        Policies associated with scopes.  # noqa: E501

        :param uma_authorization_policies: The uma_authorization_policies of this Scope.  # noqa: E501
        :type: list[str]
        """

        self._uma_authorization_policies = uma_authorization_policies

    @property
    def attributes(self):
        """Gets the attributes of this Scope.  # noqa: E501


        :return: The attributes of this Scope.  # noqa: E501
        :rtype: ScopeAttributes
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this Scope.


        :param attributes: The attributes of this Scope.  # noqa: E501
        :type: ScopeAttributes
        """

        self._attributes = attributes

    @property
    def uma_type(self):
        """Gets the uma_type of this Scope.  # noqa: E501

        Specifies if the scope is of type UMA.  # noqa: E501

        :return: The uma_type of this Scope.  # noqa: E501
        :rtype: bool
        """
        return self._uma_type

    @uma_type.setter
    def uma_type(self, uma_type):
        """Sets the uma_type of this Scope.

        Specifies if the scope is of type UMA.  # noqa: E501

        :param uma_type: The uma_type of this Scope.  # noqa: E501
        :type: bool
        """

        self._uma_type = uma_type

    @property
    def deletable(self):
        """Gets the deletable of this Scope.  # noqa: E501

        Specifies if the scope can be deleted.  # noqa: E501

        :return: The deletable of this Scope.  # noqa: E501
        :rtype: bool
        """
        return self._deletable

    @deletable.setter
    def deletable(self, deletable):
        """Sets the deletable of this Scope.

        Specifies if the scope can be deleted.  # noqa: E501

        :param deletable: The deletable of this Scope.  # noqa: E501
        :type: bool
        """

        self._deletable = deletable

    @property
    def expiration_date(self):
        """Gets the expiration_date of this Scope.  # noqa: E501

        Expiry date of the Scope.  # noqa: E501

        :return: The expiration_date of this Scope.  # noqa: E501
        :rtype: date
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this Scope.

        Expiry date of the Scope.  # noqa: E501

        :param expiration_date: The expiration_date of this Scope.  # noqa: E501
        :type: date
        """
        if expiration_date is None:
            raise ValueError("Invalid value for `expiration_date`, must not be `None`")  # noqa: E501

        self._expiration_date = expiration_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Scope, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Scope):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
